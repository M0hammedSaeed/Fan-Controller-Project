
Fan_Controller_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00002d70  00002e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080018a  0080018a  00002f2e  2**0
                  ALLOC
  3 .stab         00002c1c  00000000  00000000  00002f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016a0  00000000  00000000  00005b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000071ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000738c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000757e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009989  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ad0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_4>
      14:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_7>
      20:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_8>
      24:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_9>
      28:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_10>
      2c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 16 	call	0x2c24	; 0x2c24 <main>
      8a:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 57       	subi	r30, 0x76	; 118
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_11>:

/*
 * [Description]: The ISR's specific For TIMER0
 */
ISR(TIMER0_OVF_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
     e58:	80 91 8a 01 	lds	r24, 0x018A
     e5c:	90 91 8b 01 	lds	r25, 0x018B
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_11+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_0(); */
		(*g_Ptr_To_Fun_TIMER_0)();
     e64:	e0 91 8a 01 	lds	r30, 0x018A
     e68:	f0 91 8b 01 	lds	r31, 0x018B
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
     ebe:	80 91 8a 01 	lds	r24, 0x018A
     ec2:	90 91 8b 01 	lds	r25, 0x018B
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	29 f0       	breq	.+10     	; 0xed4 <__vector_10+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_0)();
     eca:	e0 91 8a 01 	lds	r30, 0x018A
     ece:	f0 91 8b 01 	lds	r31, 0x018B
     ed2:	09 95       	icall
	}
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_9>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER1_OVF_vect)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
     f24:	80 91 8c 01 	lds	r24, 0x018C
     f28:	90 91 8d 01 	lds	r25, 0x018D
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__vector_9+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
     f30:	e0 91 8c 01 	lds	r30, 0x018C
     f34:	f0 91 8d 01 	lds	r31, 0x018D
     f38:	09 95       	icall
	}
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
     f8a:	80 91 8c 01 	lds	r24, 0x018C
     f8e:	90 91 8d 01 	lds	r25, 0x018D
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <__vector_7+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
     f96:	e0 91 8c 01 	lds	r30, 0x018C
     f9a:	f0 91 8d 01 	lds	r31, 0x018D
     f9e:	09 95       	icall
	}
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
     ff0:	80 91 8c 01 	lds	r24, 0x018C
     ff4:	90 91 8d 01 	lds	r25, 0x018D
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	29 f0       	breq	.+10     	; 0x1006 <__vector_8+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
     ffc:	e0 91 8c 01 	lds	r30, 0x018C
    1000:	f0 91 8d 01 	lds	r31, 0x018D
    1004:	09 95       	icall
	}
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <__vector_5>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER2_OVF_vect)
{
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
    1056:	80 91 8e 01 	lds	r24, 0x018E
    105a:	90 91 8f 01 	lds	r25, 0x018F
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	29 f0       	breq	.+10     	; 0x106c <__vector_5+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_2)();
    1062:	e0 91 8e 01 	lds	r30, 0x018E
    1066:	f0 91 8f 01 	lds	r31, 0x018F
    106a:	09 95       	icall
	}
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
    10bc:	80 91 8e 01 	lds	r24, 0x018E
    10c0:	90 91 8f 01 	lds	r25, 0x018F
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	29 f0       	breq	.+10     	; 0x10d2 <__vector_4+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_2)();
    10c8:	e0 91 8e 01 	lds	r30, 0x018E
    10cc:	f0 91 8f 01 	lds	r31, 0x018F
    10d0:	09 95       	icall
	}
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	bf 91       	pop	r27
    10dc:	af 91       	pop	r26
    10de:	9f 91       	pop	r25
    10e0:	8f 91       	pop	r24
    10e2:	7f 91       	pop	r23
    10e4:	6f 91       	pop	r22
    10e6:	5f 91       	pop	r21
    10e8:	4f 91       	pop	r20
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <TIMER_Init>:
 *                  The same time from Configuration of timer .
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_Init(void)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
#if TIMER0 == ENABLE
#if (TIMER0_MODE_SELECTOR == TIMER0_MODE_PWM_PHASECORRECT_MSK) || (TIMER0_MODE_SELECTOR == TIMER0_MODE_FASTPWM_MSK)
#if (TIMER0_MODE_SELECTOR == TIMER0_MODE_PWM_PHASECORRECT_MSK)
	TCCR0_REG &= TIMER0_MODE_clr_MSK;
    1100:	a3 e5       	ldi	r26, 0x53	; 83
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e3 e5       	ldi	r30, 0x53	; 83
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	87 7b       	andi	r24, 0xB7	; 183
    110c:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_MODE_PWM_PHASECORRECT_MSK;
    110e:	a3 e5       	ldi	r26, 0x53	; 83
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e3 e5       	ldi	r30, 0x53	; 83
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	80 64       	ori	r24, 0x40	; 64
    111a:	8c 93       	st	X, r24
	TCCR0_REG &= TIMER0_MODE_clr_MSK;
	TCCR0_REG |= TIMER0_MODE_FASTPWM_MSK;
#endif

#if TIMER0_OC0_BEHAVIOR_SELECTOR == TIMER0_OC0_NON_INVERTING_MSK
	TCCR0_REG &= TIMER0_OC0_clr_MSK;
    111c:	a3 e5       	ldi	r26, 0x53	; 83
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e3 e5       	ldi	r30, 0x53	; 83
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 7c       	andi	r24, 0xCF	; 207
    1128:	8c 93       	st	X, r24
	GPIO_SetPinDir(TIMER0_OC0_PORT, TIMER0_OC0_Pin, pin_output);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	63 e0       	ldi	r22, 0x03	; 3
    112e:	41 e0       	ldi	r20, 0x01	; 1
    1130:	0e 94 4f 0a 	call	0x149e	; 0x149e <GPIO_SetPinDir>
	TCCR0_REG |= TIMER0_OC0_NON_INVERTING_MSK;
    1134:	a3 e5       	ldi	r26, 0x53	; 83
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e3 e5       	ldi	r30, 0x53	; 83
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	80 62       	ori	r24, 0x20	; 32
    1140:	8c 93       	st	X, r24
	case TIMER0_CLK_WITH_NO_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_CLK_WITH_NO_PRESCALER_MSK;
		break;
	case TIMER0_CLK_WITH_8_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
    1142:	a3 e5       	ldi	r26, 0x53	; 83
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	88 7f       	andi	r24, 0xF8	; 248
    114e:	8c 93       	st	X, r24
		TCCR0_REG |= TIMER0_CLK_WITH_8_PRESCALER_MSK;
    1150:	a3 e5       	ldi	r26, 0x53	; 83
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e3 e5       	ldi	r30, 0x53	; 83
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	82 60       	ori	r24, 0x02	; 2
    115c:	8c 93       	st	X, r24
		TCCR0_REG |= TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}

	/* Initial value for Timer/Counter0 */
	TCNT0_REG = TIMER0_INITIAL_VALUE;
    115e:	e2 e5       	ldi	r30, 0x52	; 82
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter0 */
	OCR0_REG = TIMER0_COMPARE_VALUE;
    1164:	ec e5       	ldi	r30, 0x5C	; 92
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	10 82       	st	Z, r1
	/* Compare value for Timer/Counter2 */
	OCR2_REG = TIMER2_COMPARE_VALUE;
#endif

	/* To enable TIMER's Interrupt */
	TIMER_EnableInterrupt();
    116a:	0e 94 ba 08 	call	0x1174	; 0x1174 <TIMER_EnableInterrupt>
}
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <TIMER_EnableInterrupt>:
 *                  Depend on Timer That you made it Enable.
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_EnableInterrupt(void)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TOIE2);
#elif TIMER2_COMP_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_OCIE2);
#endif
#endif
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <TIMER0_SetCallBack>:
 *                  Every set callback function follow specific Timer.
 * [Args]  : Pointer To Function take void and return void
 * [RUTURN]: Void
 */
void TIMER0_SetCallBack(void (*Ptr_To_fun)(void))
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <TIMER0_SetCallBack+0x6>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_0 = (volatile void *)Ptr_To_fun;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	90 93 8b 01 	sts	0x018B, r25
    1198:	80 93 8a 01 	sts	0x018A, r24
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void (*Ptr_To_fun)(void))
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <TIMER1_SetCallBack+0x6>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	9a 83       	std	Y+2, r25	; 0x02
    11b2:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_1 = (volatile void *)Ptr_To_fun;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	90 93 8d 01 	sts	0x018D, r25
    11bc:	80 93 8c 01 	sts	0x018C, r24
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <TIMER2_SetCallBack>:

void TIMER2_SetCallBack(void (*Ptr_To_fun)(void))
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <TIMER2_SetCallBack+0x6>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_2 = (volatile void *)Ptr_To_fun;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	90 93 8f 01 	sts	0x018F, r25
    11e0:	80 93 8e 01 	sts	0x018E, r24
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <TIMER_DeInit>:
 * [DISCRIPTION]  : This function is responsible to De-initialization all Timers
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_DeInit(void)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
	/* TIMER0 De-init */
	TCCR0_REG = 0;
    11f6:	e3 e5       	ldi	r30, 0x53	; 83
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	10 82       	st	Z, r1
	/* TIMER2 De-init */
	TCCR2_REG = 0;
    11fc:	e5 e4       	ldi	r30, 0x45	; 69
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	10 82       	st	Z, r1

	/* TIMER1 De-init */
	TCCR1A_REG = 0;
    1202:	ef e4       	ldi	r30, 0x4F	; 79
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	10 82       	st	Z, r1
	TCCR1B_REG = 0;
    1208:	ee e4       	ldi	r30, 0x4E	; 78
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	10 82       	st	Z, r1
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <Timer0_PWM_DutyCycle>:
 *					 5. Setup the direction for OC0 as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer0_PWM_DutyCycle(uint8 duty_cycle)
{
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter0 */
	TCNT0_REG = TIMER0_INITIAL_VALUE;
    1224:	e2 e5       	ldi	r30, 0x52	; 82
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	10 82       	st	Z, r1

	/* Set Compare value */
	OCR0_REG = ((float32)duty_cycle / 100) * 255;
    122a:	0c e5       	ldi	r16, 0x5C	; 92
    122c:	10 e0       	ldi	r17, 0x00	; 0
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a0 e0       	ldi	r26, 0x00	; 0
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	bc 01       	movw	r22, r24
    1246:	cd 01       	movw	r24, r26
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	48 ec       	ldi	r20, 0xC8	; 200
    124e:	52 e4       	ldi	r21, 0x42	; 66
    1250:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	bc 01       	movw	r22, r24
    125a:	cd 01       	movw	r24, r26
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	53 e4       	ldi	r21, 0x43	; 67
    1264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	f8 01       	movw	r30, r16
    127a:	80 83       	st	Z, r24

#if (TIMER0_MODE_SELECTOR == TIMER0_MODE_PWM_PHASECORRECT_MSK)
	TCCR0_REG &= TIMER0_MODE_clr_MSK;
    127c:	a3 e5       	ldi	r26, 0x53	; 83
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e3 e5       	ldi	r30, 0x53	; 83
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	87 7b       	andi	r24, 0xB7	; 183
    1288:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_MODE_PWM_PHASECORRECT_MSK;
    128a:	a3 e5       	ldi	r26, 0x53	; 83
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e3 e5       	ldi	r30, 0x53	; 83
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 64       	ori	r24, 0x40	; 64
    1296:	8c 93       	st	X, r24
	TCCR0_REG &= TIMER0_MODE_clr_MSK;
	TCCR0_REG |= TIMER0_MODE_FASTPWM_MSK;
#endif

#if TIMER0_OC0_BEHAVIOR_SELECTOR == TIMER0_OC0_NON_INVERTING_MSK
	TCCR0_REG &= TIMER0_OC0_clr_MSK;
    1298:	a3 e5       	ldi	r26, 0x53	; 83
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e3 e5       	ldi	r30, 0x53	; 83
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 7c       	andi	r24, 0xCF	; 207
    12a4:	8c 93       	st	X, r24
	GPIO_SetPinDir(TIMER0_OC0_PORT, TIMER0_OC0_Pin, pin_output);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	63 e0       	ldi	r22, 0x03	; 3
    12aa:	41 e0       	ldi	r20, 0x01	; 1
    12ac:	0e 94 4f 0a 	call	0x149e	; 0x149e <GPIO_SetPinDir>
	TCCR0_REG |= TIMER0_OC0_NON_INVERTING_MSK;
    12b0:	a3 e5       	ldi	r26, 0x53	; 83
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e3 e5       	ldi	r30, 0x53	; 83
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 62       	ori	r24, 0x20	; 32
    12bc:	8c 93       	st	X, r24
	case TIMER0_CLK_WITH_NO_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_CLK_WITH_NO_PRESCALER_MSK;
		break;
	case TIMER0_CLK_WITH_8_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
    12be:	a3 e5       	ldi	r26, 0x53	; 83
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e3 e5       	ldi	r30, 0x53	; 83
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 7f       	andi	r24, 0xF8	; 248
    12ca:	8c 93       	st	X, r24
		TCCR0_REG |= TIMER0_CLK_WITH_8_PRESCALER_MSK;
    12cc:	a3 e5       	ldi	r26, 0x53	; 83
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e3 e5       	ldi	r30, 0x53	; 83
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	82 60       	ori	r24, 0x02	; 2
    12d8:	8c 93       	st	X, r24
	case TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <Timer1_PWM_DutyCycle>:
 *					 5. Setup the direction for OC1B as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer1_PWM_DutyCycle(uint16  duty_cycle)
{
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <Timer1_PWM_DutyCycle+0xa>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter1 */
	TCNT1_REG = TIMER1_INITIAL_VALUE;
    12f8:	ec e4       	ldi	r30, 0x4C	; 76
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	11 82       	std	Z+1, r1	; 0x01
    12fe:	10 82       	st	Z, r1
	/*
	 * use fast mode with top value at OCRA reg
	 * diconnect OC1A PIN ,and generate the PWM on OC1B PIN
	 */
	/* Compare value for Timer/Counter0 */
	OCR1A_REG = TIMER1_COMPARE_A_VALUE;
    1300:	ea e4       	ldi	r30, 0x4A	; 74
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	83 ec       	ldi	r24, 0xC3	; 195
    1306:	99 e0       	ldi	r25, 0x09	; 9
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	80 83       	st	Z, r24
	OCR1B_REG = ((float32)duty_cycle / 100) * 65535;
    130c:	08 e4       	ldi	r16, 0x48	; 72
    130e:	10 e0       	ldi	r17, 0x00	; 0
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	cc 01       	movw	r24, r24
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	48 ec       	ldi	r20, 0xC8	; 200
    1330:	52 e4       	ldi	r21, 0x42	; 66
    1332:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	3f ef       	ldi	r19, 0xFF	; 255
    1342:	4f e7       	ldi	r20, 0x7F	; 127
    1344:	57 e4       	ldi	r21, 0x47	; 71
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	f8 01       	movw	r30, r16
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
	TCCR1B_REG &= TIMER1_MODE_clr_B_MSK;

	TCCR1A_REG |= TIMER1_MODE_PWM_PHASE_CORRECT_A_MSK;
	TCCR1B_REG |= TIMER1_MODE_PWM_PHASE_CORRECT_B_MSK;
#elif TIMER1_MODE_SELECTOR ==TIMER1_MODE_FAST_PWM_MSK
	TCCR1A_REG &= TIMER1_MODE_clr_A_MSK;
    1360:	af e4       	ldi	r26, 0x4F	; 79
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ef e4       	ldi	r30, 0x4F	; 79
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8c 7f       	andi	r24, 0xFC	; 252
    136c:	8c 93       	st	X, r24
	TCCR1B_REG &= TIMER1_MODE_clr_B_MSK;
    136e:	ae e4       	ldi	r26, 0x4E	; 78
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ee e4       	ldi	r30, 0x4E	; 78
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	87 7e       	andi	r24, 0xE7	; 231
    137a:	8c 93       	st	X, r24

	TCCR1A_REG |= TIMER1_MODE_FAST_PWM_A_MSK;
    137c:	af e4       	ldi	r26, 0x4F	; 79
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	ef e4       	ldi	r30, 0x4F	; 79
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	83 60       	ori	r24, 0x03	; 3
    1388:	8c 93       	st	X, r24
	TCCR1B_REG |= TIMER1_MODE_FAST_PWM_B_MSK;
    138a:	ae e4       	ldi	r26, 0x4E	; 78
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	ee e4       	ldi	r30, 0x4E	; 78
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	88 61       	ori	r24, 0x18	; 24
    1396:	8c 93       	st	X, r24
#endif

	GPIO_SetPinDir(TIMER1_OC1B_PORT, TIMER1_OC1B_Pin, pin_output);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	64 e0       	ldi	r22, 0x04	; 4
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	0e 94 4f 0a 	call	0x149e	; 0x149e <GPIO_SetPinDir>

#if TIMER1_OC1_BEHAVIOR_SELECTOR == TIMER1_OC1_NON_INVERTING_MSK
	TCCR1A_REG &= TIMER1_OC1B_clr_MSK;
    13a2:	af e4       	ldi	r26, 0x4F	; 79
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ef e4       	ldi	r30, 0x4F	; 79
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 7c       	andi	r24, 0xCF	; 207
    13ae:	8c 93       	st	X, r24
	TCCR1A_REG |= TIMER1_OC1B_NON_INVERTING_MSK;
    13b0:	af e4       	ldi	r26, 0x4F	; 79
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ef e4       	ldi	r30, 0x4F	; 79
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 62       	ori	r24, 0x20	; 32
    13bc:	8c 93       	st	X, r24
	case TIMER1_CLK_WITH_NO_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_CLK_WITH_NO_PRESCALER_MSK;
		break;
	case TIMER1_CLK_WITH_8_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
    13be:	ae e4       	ldi	r26, 0x4E	; 78
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ee e4       	ldi	r30, 0x4E	; 78
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	88 7f       	andi	r24, 0xF8	; 248
    13ca:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_CLK_WITH_8_PRESCALER_MSK;
    13cc:	ae e4       	ldi	r26, 0x4E	; 78
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ee e4       	ldi	r30, 0x4E	; 78
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	82 60       	ori	r24, 0x02	; 2
    13d8:	8c 93       	st	X, r24
	case TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <Timer2_PWM_DutyCycle>:
 *					 5. Setup the direction for OCR2 as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer2_PWM_DutyCycle(uint8 duty_cycle)
{
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	0f 92       	push	r0
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	89 83       	std	Y+1, r24	; 0x01

	/* Initial value for Timer/Counter2 */
	TCNT2_REG = TIMER2_INITIAL_VALUE;
    13f8:	e4 e4       	ldi	r30, 0x44	; 68
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter2 */
	OCR2_REG = ((float32)duty_cycle / 100) * 255;
    13fe:	03 e4       	ldi	r16, 0x43	; 67
    1400:	10 e0       	ldi	r17, 0x00	; 0
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a0 e0       	ldi	r26, 0x00	; 0
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	48 ec       	ldi	r20, 0xC8	; 200
    1422:	52 e4       	ldi	r21, 0x42	; 66
    1424:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	4f e7       	ldi	r20, 0x7F	; 127
    1436:	53 e4       	ldi	r21, 0x43	; 67
    1438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	f8 01       	movw	r30, r16
    144e:	80 83       	st	Z, r24
	TCCR2_REG &= TIMER2_MODE_clr_MSK;
	TCCR2_REG |= TIMER2_MODE_FASTPWM_MSK;
#endif

#if TIMER2_OC2_BEHAVIOR_SELECTOR == TIMER2_OC2_NON_INVERTING_MSK
	TCCR2_REG &= TIMER2_OC2_clr_MSK;
    1450:	a5 e4       	ldi	r26, 0x45	; 69
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e4       	ldi	r30, 0x45	; 69
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	8f 7c       	andi	r24, 0xCF	; 207
    145c:	8c 93       	st	X, r24
	GPIO_SetPinDir(TIMER2_OC2_PORT, TIMER2_OC2_Pin, pin_output);
    145e:	83 e0       	ldi	r24, 0x03	; 3
    1460:	67 e0       	ldi	r22, 0x07	; 7
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	0e 94 4f 0a 	call	0x149e	; 0x149e <GPIO_SetPinDir>
	TCCR2_REG |= TIMER2_OC2_NON_INVERTING_MSK;
    1468:	a5 e4       	ldi	r26, 0x45	; 69
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e4       	ldi	r30, 0x45	; 69
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 62       	ori	r24, 0x20	; 32
    1474:	8c 93       	st	X, r24
	case TIMER2_CLK_WITH_256_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
		TCCR2_REG |= TIMER2_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER2_CLK_WITH_1024_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
    1476:	a5 e4       	ldi	r26, 0x45	; 69
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e4       	ldi	r30, 0x45	; 69
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	88 7f       	andi	r24, 0xF8	; 248
    1482:	8c 93       	st	X, r24
		TCCR2_REG |= TIMER2_CLK_WITH_1024_PRESCALER_MSK;
    1484:	a5 e4       	ldi	r26, 0x45	; 69
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e4       	ldi	r30, 0x45	; 69
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	87 60       	ori	r24, 0x07	; 7
    1490:	8c 93       	st	X, r24
		break;
	}
}
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	08 95       	ret

0000149e <GPIO_SetPinDir>:
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/

void GPIO_SetPinDir(uint8 PORTn, uint8 PINn, GPIO_PinDirection Dir)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <GPIO_SetPinDir+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <GPIO_SetPinDir+0x8>
    14a6:	0f 92       	push	r0
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6a 83       	std	Y+2, r22	; 0x02
    14b0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number.
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <GPIO_SetPinDir+0x1c>
    14b8:	d5 c0       	rjmp	.+426    	; 0x1664 <GPIO_SetPinDir+0x1c6>
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <GPIO_SetPinDir+0x24>
    14c0:	d1 c0       	rjmp	.+418    	; 0x1664 <GPIO_SetPinDir+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(PORTn)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3d 83       	std	Y+5, r19	; 0x05
    14ca:	2c 83       	std	Y+4, r18	; 0x04
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	9d 81       	ldd	r25, Y+5	; 0x05
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <GPIO_SetPinDir+0x3a>
    14d6:	43 c0       	rjmp	.+134    	; 0x155e <GPIO_SetPinDir+0xc0>
    14d8:	2c 81       	ldd	r18, Y+4	; 0x04
    14da:	3d 81       	ldd	r19, Y+5	; 0x05
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	2c f4       	brge	.+10     	; 0x14ec <GPIO_SetPinDir+0x4e>
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	71 f0       	breq	.+28     	; 0x1506 <GPIO_SetPinDir+0x68>
    14ea:	bc c0       	rjmp	.+376    	; 0x1664 <GPIO_SetPinDir+0x1c6>
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <GPIO_SetPinDir+0x5a>
    14f6:	5f c0       	rjmp	.+190    	; 0x15b6 <GPIO_SetPinDir+0x118>
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <GPIO_SetPinDir+0x66>
    1502:	85 c0       	rjmp	.+266    	; 0x160e <GPIO_SetPinDir+0x170>
    1504:	af c0       	rjmp	.+350    	; 0x1664 <GPIO_SetPinDir+0x1c6>
		{
		case PORTA_ID:
			if(Dir == pin_output)
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	a1 f4       	brne	.+40     	; 0x1534 <GPIO_SetPinDir+0x96>
			{
				SET_BIT(DDRA_REG,PINn);
    150c:	aa e3       	ldi	r26, 0x3A	; 58
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ea e3       	ldi	r30, 0x3A	; 58
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <GPIO_SetPinDir+0x8c>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <GPIO_SetPinDir+0x88>
    152e:	84 2b       	or	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	98 c0       	rjmp	.+304    	; 0x1664 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG,PINn);
    1534:	aa e3       	ldi	r26, 0x3A	; 58
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ea e3       	ldi	r30, 0x3A	; 58
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_SetPinDir+0xb4>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_SetPinDir+0xb0>
    1556:	80 95       	com	r24
    1558:	84 23       	and	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	83 c0       	rjmp	.+262    	; 0x1664 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTB_ID:
			if(Dir == pin_output)
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	a1 f4       	brne	.+40     	; 0x158c <GPIO_SetPinDir+0xee>
			{
				SET_BIT(DDRB_REG,PINn);
    1564:	a7 e3       	ldi	r26, 0x37	; 55
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e7 e3       	ldi	r30, 0x37	; 55
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <GPIO_SetPinDir+0xe4>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <GPIO_SetPinDir+0xe0>
    1586:	84 2b       	or	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	6c c0       	rjmp	.+216    	; 0x1664 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG,PINn);
    158c:	a7 e3       	ldi	r26, 0x37	; 55
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e7 e3       	ldi	r30, 0x37	; 55
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <GPIO_SetPinDir+0x10c>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <GPIO_SetPinDir+0x108>
    15ae:	80 95       	com	r24
    15b0:	84 23       	and	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	57 c0       	rjmp	.+174    	; 0x1664 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTC_ID:
			if(Dir == pin_output)
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	a1 f4       	brne	.+40     	; 0x15e4 <GPIO_SetPinDir+0x146>
			{
				SET_BIT(DDRC_REG,PINn);
    15bc:	a4 e3       	ldi	r26, 0x34	; 52
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e4 e3       	ldi	r30, 0x34	; 52
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <GPIO_SetPinDir+0x13c>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <GPIO_SetPinDir+0x138>
    15de:	84 2b       	or	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	40 c0       	rjmp	.+128    	; 0x1664 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG,PINn);
    15e4:	a4 e3       	ldi	r26, 0x34	; 52
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e4 e3       	ldi	r30, 0x34	; 52
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <GPIO_SetPinDir+0x164>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <GPIO_SetPinDir+0x160>
    1606:	80 95       	com	r24
    1608:	84 23       	and	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	2b c0       	rjmp	.+86     	; 0x1664 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTD_ID:
			if(Dir == pin_output)
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	a1 f4       	brne	.+40     	; 0x163c <GPIO_SetPinDir+0x19e>
			{
				SET_BIT(DDRD_REG,PINn);
    1614:	a1 e3       	ldi	r26, 0x31	; 49
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e1 e3       	ldi	r30, 0x31	; 49
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <GPIO_SetPinDir+0x194>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <GPIO_SetPinDir+0x190>
    1636:	84 2b       	or	r24, r20
    1638:	8c 93       	st	X, r24
    163a:	14 c0       	rjmp	.+40     	; 0x1664 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG,PINn);
    163c:	a1 e3       	ldi	r26, 0x31	; 49
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e1 e3       	ldi	r30, 0x31	; 49
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <GPIO_SetPinDir+0x1bc>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <GPIO_SetPinDir+0x1b8>
    165e:	80 95       	com	r24
    1660:	84 23       	and	r24, r20
    1662:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <GPIO_ReadPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPin(uint8 PORTn, uint8 PINn)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <GPIO_ReadPin+0x6>
    167a:	00 d0       	rcall	.+0      	; 0x167c <GPIO_ReadPin+0x8>
    167c:	0f 92       	push	r0
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	8a 83       	std	Y+2, r24	; 0x02
    1684:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1686:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	84 30       	cpi	r24, 0x04	; 4
    168c:	08 f0       	brcs	.+2      	; 0x1690 <GPIO_ReadPin+0x1c>
    168e:	84 c0       	rjmp	.+264    	; 0x1798 <GPIO_ReadPin+0x124>
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	88 30       	cpi	r24, 0x08	; 8
    1694:	08 f0       	brcs	.+2      	; 0x1698 <GPIO_ReadPin+0x24>
    1696:	80 c0       	rjmp	.+256    	; 0x1798 <GPIO_ReadPin+0x124>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the pin value as required */
		switch(PORTn)
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3d 83       	std	Y+5, r19	; 0x05
    16a0:	2c 83       	std	Y+4, r18	; 0x04
    16a2:	4c 81       	ldd	r20, Y+4	; 0x04
    16a4:	5d 81       	ldd	r21, Y+5	; 0x05
    16a6:	41 30       	cpi	r20, 0x01	; 1
    16a8:	51 05       	cpc	r21, r1
    16aa:	79 f1       	breq	.+94     	; 0x170a <GPIO_ReadPin+0x96>
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	82 30       	cpi	r24, 0x02	; 2
    16b2:	91 05       	cpc	r25, r1
    16b4:	34 f4       	brge	.+12     	; 0x16c2 <GPIO_ReadPin+0x4e>
    16b6:	2c 81       	ldd	r18, Y+4	; 0x04
    16b8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ba:	21 15       	cp	r18, r1
    16bc:	31 05       	cpc	r19, r1
    16be:	69 f0       	breq	.+26     	; 0x16da <GPIO_ReadPin+0x66>
    16c0:	6b c0       	rjmp	.+214    	; 0x1798 <GPIO_ReadPin+0x124>
    16c2:	4c 81       	ldd	r20, Y+4	; 0x04
    16c4:	5d 81       	ldd	r21, Y+5	; 0x05
    16c6:	42 30       	cpi	r20, 0x02	; 2
    16c8:	51 05       	cpc	r21, r1
    16ca:	b9 f1       	breq	.+110    	; 0x173a <GPIO_ReadPin+0xc6>
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	9d 81       	ldd	r25, Y+5	; 0x05
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	91 05       	cpc	r25, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <GPIO_ReadPin+0x64>
    16d6:	49 c0       	rjmp	.+146    	; 0x176a <GPIO_ReadPin+0xf6>
    16d8:	5f c0       	rjmp	.+190    	; 0x1798 <GPIO_ReadPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,PINn))
    16da:	e9 e3       	ldi	r30, 0x39	; 57
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a9 01       	movw	r20, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_ReadPin+0x7e>
    16ee:	55 95       	asr	r21
    16f0:	47 95       	ror	r20
    16f2:	8a 95       	dec	r24
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_ReadPin+0x7a>
    16f6:	ca 01       	movw	r24, r20
    16f8:	81 70       	andi	r24, 0x01	; 1
    16fa:	90 70       	andi	r25, 0x00	; 0
    16fc:	88 23       	and	r24, r24
    16fe:	19 f0       	breq	.+6      	; 0x1706 <GPIO_ReadPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	49 c0       	rjmp	.+146    	; 0x1798 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	47 c0       	rjmp	.+142    	; 0x1798 <GPIO_ReadPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,PINn))
    170a:	e6 e3       	ldi	r30, 0x36	; 54
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a9 01       	movw	r20, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GPIO_ReadPin+0xae>
    171e:	55 95       	asr	r21
    1720:	47 95       	ror	r20
    1722:	8a 95       	dec	r24
    1724:	e2 f7       	brpl	.-8      	; 0x171e <GPIO_ReadPin+0xaa>
    1726:	ca 01       	movw	r24, r20
    1728:	81 70       	andi	r24, 0x01	; 1
    172a:	90 70       	andi	r25, 0x00	; 0
    172c:	88 23       	and	r24, r24
    172e:	19 f0       	breq	.+6      	; 0x1736 <GPIO_ReadPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	31 c0       	rjmp	.+98     	; 0x1798 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1736:	19 82       	std	Y+1, r1	; 0x01
    1738:	2f c0       	rjmp	.+94     	; 0x1798 <GPIO_ReadPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC_REG,PINn))
    173a:	e3 e3       	ldi	r30, 0x33	; 51
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a9 01       	movw	r20, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <GPIO_ReadPin+0xde>
    174e:	55 95       	asr	r21
    1750:	47 95       	ror	r20
    1752:	8a 95       	dec	r24
    1754:	e2 f7       	brpl	.-8      	; 0x174e <GPIO_ReadPin+0xda>
    1756:	ca 01       	movw	r24, r20
    1758:	81 70       	andi	r24, 0x01	; 1
    175a:	90 70       	andi	r25, 0x00	; 0
    175c:	88 23       	and	r24, r24
    175e:	19 f0       	breq	.+6      	; 0x1766 <GPIO_ReadPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	19 c0       	rjmp	.+50     	; 0x1798 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1766:	19 82       	std	Y+1, r1	; 0x01
    1768:	17 c0       	rjmp	.+46     	; 0x1798 <GPIO_ReadPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND_REG,PINn))
    176a:	e0 e3       	ldi	r30, 0x30	; 48
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	88 2f       	mov	r24, r24
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a9 01       	movw	r20, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <GPIO_ReadPin+0x10e>
    177e:	55 95       	asr	r21
    1780:	47 95       	ror	r20
    1782:	8a 95       	dec	r24
    1784:	e2 f7       	brpl	.-8      	; 0x177e <GPIO_ReadPin+0x10a>
    1786:	ca 01       	movw	r24, r20
    1788:	81 70       	andi	r24, 0x01	; 1
    178a:	90 70       	andi	r25, 0x00	; 0
    178c:	88 23       	and	r24, r24
    178e:	19 f0       	breq	.+6      	; 0x1796 <GPIO_ReadPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1796:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1798:	89 81       	ldd	r24, Y+1	; 0x01
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <GPIO_WritePin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePin(uint8 PORTn, uint8 PINn, STD_LevelType level)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <GPIO_WritePin+0x6>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <GPIO_WritePin+0x8>
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	6a 83       	std	Y+2, r22	; 0x02
    17bc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <GPIO_WritePin+0x1c>
    17c4:	d5 c0       	rjmp	.+426    	; 0x1970 <GPIO_WritePin+0x1c6>
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	88 30       	cpi	r24, 0x08	; 8
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <GPIO_WritePin+0x24>
    17cc:	d1 c0       	rjmp	.+418    	; 0x1970 <GPIO_WritePin+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Write the pin value as required */
		switch(PORTn)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3d 83       	std	Y+5, r19	; 0x05
    17d6:	2c 83       	std	Y+4, r18	; 0x04
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <GPIO_WritePin+0x3a>
    17e2:	43 c0       	rjmp	.+134    	; 0x186a <GPIO_WritePin+0xc0>
    17e4:	2c 81       	ldd	r18, Y+4	; 0x04
    17e6:	3d 81       	ldd	r19, Y+5	; 0x05
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <GPIO_WritePin+0x4e>
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	9d 81       	ldd	r25, Y+5	; 0x05
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	71 f0       	breq	.+28     	; 0x1812 <GPIO_WritePin+0x68>
    17f6:	bc c0       	rjmp	.+376    	; 0x1970 <GPIO_WritePin+0x1c6>
    17f8:	2c 81       	ldd	r18, Y+4	; 0x04
    17fa:	3d 81       	ldd	r19, Y+5	; 0x05
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <GPIO_WritePin+0x5a>
    1802:	5f c0       	rjmp	.+190    	; 0x18c2 <GPIO_WritePin+0x118>
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	9d 81       	ldd	r25, Y+5	; 0x05
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	91 05       	cpc	r25, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <GPIO_WritePin+0x66>
    180e:	85 c0       	rjmp	.+266    	; 0x191a <GPIO_WritePin+0x170>
    1810:	af c0       	rjmp	.+350    	; 0x1970 <GPIO_WritePin+0x1c6>
		{
		case PORTA_ID:
			if(level == LOGIC_HIGH)
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	a1 f4       	brne	.+40     	; 0x1840 <GPIO_WritePin+0x96>
			{
				SET_BIT(PORTA_REG,PINn);
    1818:	ab e3       	ldi	r26, 0x3B	; 59
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	eb e3       	ldi	r30, 0x3B	; 59
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <GPIO_WritePin+0x8c>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <GPIO_WritePin+0x88>
    183a:	84 2b       	or	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	98 c0       	rjmp	.+304    	; 0x1970 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA_REG,PINn);
    1840:	ab e3       	ldi	r26, 0x3B	; 59
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	eb e3       	ldi	r30, 0x3B	; 59
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <GPIO_WritePin+0xb4>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <GPIO_WritePin+0xb0>
    1862:	80 95       	com	r24
    1864:	84 23       	and	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	83 c0       	rjmp	.+262    	; 0x1970 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(level == LOGIC_HIGH)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	a1 f4       	brne	.+40     	; 0x1898 <GPIO_WritePin+0xee>
			{
				SET_BIT(PORTB_REG,PINn);
    1870:	a8 e3       	ldi	r26, 0x38	; 56
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e8 e3       	ldi	r30, 0x38	; 56
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <GPIO_WritePin+0xe4>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <GPIO_WritePin+0xe0>
    1892:	84 2b       	or	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	6c c0       	rjmp	.+216    	; 0x1970 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB_REG,PINn);
    1898:	a8 e3       	ldi	r26, 0x38	; 56
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e8 e3       	ldi	r30, 0x38	; 56
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <GPIO_WritePin+0x10c>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <GPIO_WritePin+0x108>
    18ba:	80 95       	com	r24
    18bc:	84 23       	and	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	57 c0       	rjmp	.+174    	; 0x1970 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(level == LOGIC_HIGH)
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	a1 f4       	brne	.+40     	; 0x18f0 <GPIO_WritePin+0x146>
			{
				SET_BIT(PORTC_REG,PINn);
    18c8:	a5 e3       	ldi	r26, 0x35	; 53
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e3       	ldi	r30, 0x35	; 53
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <GPIO_WritePin+0x13c>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <GPIO_WritePin+0x138>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	40 c0       	rjmp	.+128    	; 0x1970 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC_REG,PINn);
    18f0:	a5 e3       	ldi	r26, 0x35	; 53
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e5 e3       	ldi	r30, 0x35	; 53
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <GPIO_WritePin+0x164>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <GPIO_WritePin+0x160>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	2b c0       	rjmp	.+86     	; 0x1970 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(level == LOGIC_HIGH)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	a1 f4       	brne	.+40     	; 0x1948 <GPIO_WritePin+0x19e>
			{
				SET_BIT(PORTD_REG,PINn);
    1920:	a2 e3       	ldi	r26, 0x32	; 50
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e2 e3       	ldi	r30, 0x32	; 50
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <GPIO_WritePin+0x194>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <GPIO_WritePin+0x190>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD_REG,PINn);
    1948:	a2 e3       	ldi	r26, 0x32	; 50
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e2 e3       	ldi	r30, 0x32	; 50
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <GPIO_WritePin+0x1bc>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <GPIO_WritePin+0x1b8>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <GPIO_FlipPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPin(uint8 PORTn, uint8 PINn)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	00 d0       	rcall	.+0      	; 0x1986 <GPIO_FlipPin+0x6>
    1986:	00 d0       	rcall	.+0      	; 0x1988 <GPIO_FlipPin+0x8>
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	84 30       	cpi	r24, 0x04	; 4
    1994:	08 f0       	brcs	.+2      	; 0x1998 <GPIO_FlipPin+0x18>
    1996:	72 c0       	rjmp	.+228    	; 0x1a7c <GPIO_FlipPin+0xfc>
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	88 30       	cpi	r24, 0x08	; 8
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <GPIO_FlipPin+0x20>
    199e:	6e c0       	rjmp	.+220    	; 0x1a7c <GPIO_FlipPin+0xfc>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Flip the pin value as required */
		switch(PORTn)
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	3c 83       	std	Y+4, r19	; 0x04
    19a8:	2b 83       	std	Y+3, r18	; 0x03
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	91 05       	cpc	r25, r1
    19b2:	49 f1       	breq	.+82     	; 0x1a06 <GPIO_FlipPin+0x86>
    19b4:	2b 81       	ldd	r18, Y+3	; 0x03
    19b6:	3c 81       	ldd	r19, Y+4	; 0x04
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <GPIO_FlipPin+0x48>
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	61 f0       	breq	.+24     	; 0x19de <GPIO_FlipPin+0x5e>
    19c6:	5a c0       	rjmp	.+180    	; 0x1a7c <GPIO_FlipPin+0xfc>
    19c8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ca:	3c 81       	ldd	r19, Y+4	; 0x04
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	71 f1       	breq	.+92     	; 0x1a2e <GPIO_FlipPin+0xae>
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	9c 81       	ldd	r25, Y+4	; 0x04
    19d6:	83 30       	cpi	r24, 0x03	; 3
    19d8:	91 05       	cpc	r25, r1
    19da:	e9 f1       	breq	.+122    	; 0x1a56 <GPIO_FlipPin+0xd6>
    19dc:	4f c0       	rjmp	.+158    	; 0x1a7c <GPIO_FlipPin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA_REG,PINn);
    19de:	ab e3       	ldi	r26, 0x3B	; 59
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	eb e3       	ldi	r30, 0x3B	; 59
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	48 2f       	mov	r20, r24
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	02 2e       	mov	r0, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <GPIO_FlipPin+0x7c>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	0a 94       	dec	r0
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <GPIO_FlipPin+0x78>
    1a00:	84 27       	eor	r24, r20
    1a02:	8c 93       	st	X, r24
    1a04:	3b c0       	rjmp	.+118    	; 0x1a7c <GPIO_FlipPin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB_REG,PINn);
    1a06:	a8 e3       	ldi	r26, 0x38	; 56
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e8 e3       	ldi	r30, 0x38	; 56
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	48 2f       	mov	r20, r24
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 2e       	mov	r0, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <GPIO_FlipPin+0xa4>
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	0a 94       	dec	r0
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <GPIO_FlipPin+0xa0>
    1a28:	84 27       	eor	r24, r20
    1a2a:	8c 93       	st	X, r24
    1a2c:	27 c0       	rjmp	.+78     	; 0x1a7c <GPIO_FlipPin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC_REG,PINn);
    1a2e:	a5 e3       	ldi	r26, 0x35	; 53
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e5 e3       	ldi	r30, 0x35	; 53
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <GPIO_FlipPin+0xcc>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <GPIO_FlipPin+0xc8>
    1a50:	84 27       	eor	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	13 c0       	rjmp	.+38     	; 0x1a7c <GPIO_FlipPin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD_REG,PINn);
    1a56:	a2 e3       	ldi	r26, 0x32	; 50
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e2 e3       	ldi	r30, 0x32	; 50
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <GPIO_FlipPin+0xf4>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <GPIO_FlipPin+0xf0>
    1a78:	84 27       	eor	r24, r20
    1a7a:	8c 93       	st	X, r24
			break;
		}
	}
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <GPIO_SetPortDir>:
 [Args]: PORTn_ID(n=A,B,C,D) and Direction (input_port or output_port)
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_SetPortDir(uint8 PORTn, GPIO_PortDirection Dir)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <GPIO_SetPortDir+0x6>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <GPIO_SetPortDir+0x8>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	84 30       	cpi	r24, 0x04	; 4
    1a9e:	90 f5       	brcc	.+100    	; 0x1b04 <GPIO_SetPortDir+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	3c 83       	std	Y+4, r19	; 0x04
    1aa8:	2b 83       	std	Y+3, r18	; 0x03
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	d1 f0       	breq	.+52     	; 0x1ae8 <GPIO_SetPortDir+0x5e>
    1ab4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab8:	22 30       	cpi	r18, 0x02	; 2
    1aba:	31 05       	cpc	r19, r1
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <GPIO_SetPortDir+0x3e>
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	61 f0       	breq	.+24     	; 0x1ade <GPIO_SetPortDir+0x54>
    1ac6:	1e c0       	rjmp	.+60     	; 0x1b04 <GPIO_SetPortDir+0x7a>
    1ac8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aca:	3c 81       	ldd	r19, Y+4	; 0x04
    1acc:	22 30       	cpi	r18, 0x02	; 2
    1ace:	31 05       	cpc	r19, r1
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <GPIO_SetPortDir+0x68>
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	83 30       	cpi	r24, 0x03	; 3
    1ad8:	91 05       	cpc	r25, r1
    1ada:	81 f0       	breq	.+32     	; 0x1afc <GPIO_SetPortDir+0x72>
    1adc:	13 c0       	rjmp	.+38     	; 0x1b04 <GPIO_SetPortDir+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = Dir;
    1ade:	ea e3       	ldi	r30, 0x3A	; 58
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	80 83       	st	Z, r24
    1ae6:	0e c0       	rjmp	.+28     	; 0x1b04 <GPIO_SetPortDir+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = Dir;
    1ae8:	e7 e3       	ldi	r30, 0x37	; 55
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	80 83       	st	Z, r24
    1af0:	09 c0       	rjmp	.+18     	; 0x1b04 <GPIO_SetPortDir+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = Dir;
    1af2:	e4 e3       	ldi	r30, 0x34	; 52
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	80 83       	st	Z, r24
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <GPIO_SetPortDir+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = Dir;
    1afc:	e1 e3       	ldi	r30, 0x31	; 49
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <GPIO_ReadPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPort(uint8 PORTn)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <GPIO_ReadPort+0x6>
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <GPIO_ReadPort+0x8>
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1b20:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	84 30       	cpi	r24, 0x04	; 4
    1b26:	90 f5       	brcc	.+100    	; 0x1b8c <GPIO_ReadPort+0x7a>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the port value as required */
		switch(PORTn)
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	3c 83       	std	Y+4, r19	; 0x04
    1b30:	2b 83       	std	Y+3, r18	; 0x03
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	91 05       	cpc	r25, r1
    1b3a:	d1 f0       	breq	.+52     	; 0x1b70 <GPIO_ReadPort+0x5e>
    1b3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <GPIO_ReadPort+0x3e>
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	61 f0       	breq	.+24     	; 0x1b66 <GPIO_ReadPort+0x54>
    1b4e:	1e c0       	rjmp	.+60     	; 0x1b8c <GPIO_ReadPort+0x7a>
    1b50:	2b 81       	ldd	r18, Y+3	; 0x03
    1b52:	3c 81       	ldd	r19, Y+4	; 0x04
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	81 f0       	breq	.+32     	; 0x1b7a <GPIO_ReadPort+0x68>
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	91 05       	cpc	r25, r1
    1b62:	81 f0       	breq	.+32     	; 0x1b84 <GPIO_ReadPort+0x72>
    1b64:	13 c0       	rjmp	.+38     	; 0x1b8c <GPIO_ReadPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA_REG;
    1b66:	e9 e3       	ldi	r30, 0x39	; 57
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	0e c0       	rjmp	.+28     	; 0x1b8c <GPIO_ReadPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB_REG;
    1b70:	e6 e3       	ldi	r30, 0x36	; 54
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	09 c0       	rjmp	.+18     	; 0x1b8c <GPIO_ReadPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC_REG;
    1b7a:	e3 e3       	ldi	r30, 0x33	; 51
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <GPIO_ReadPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND_REG;
    1b84:	e0 e3       	ldi	r30, 0x30	; 48
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <GPIO_WritePort>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePort(uint8 PORTn, uint8 value)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <GPIO_WritePort+0x6>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <GPIO_WritePort+0x8>
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	90 f5       	brcc	.+100    	; 0x1c16 <GPIO_WritePort+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	3c 83       	std	Y+4, r19	; 0x04
    1bba:	2b 83       	std	Y+3, r18	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	d1 f0       	breq	.+52     	; 0x1bfa <GPIO_WritePort+0x5e>
    1bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bca:	22 30       	cpi	r18, 0x02	; 2
    1bcc:	31 05       	cpc	r19, r1
    1bce:	2c f4       	brge	.+10     	; 0x1bda <GPIO_WritePort+0x3e>
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	61 f0       	breq	.+24     	; 0x1bf0 <GPIO_WritePort+0x54>
    1bd8:	1e c0       	rjmp	.+60     	; 0x1c16 <GPIO_WritePort+0x7a>
    1bda:	2b 81       	ldd	r18, Y+3	; 0x03
    1bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	81 f0       	breq	.+32     	; 0x1c04 <GPIO_WritePort+0x68>
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	91 05       	cpc	r25, r1
    1bec:	81 f0       	breq	.+32     	; 0x1c0e <GPIO_WritePort+0x72>
    1bee:	13 c0       	rjmp	.+38     	; 0x1c16 <GPIO_WritePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value;
    1bf0:	eb e3       	ldi	r30, 0x3B	; 59
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	80 83       	st	Z, r24
    1bf8:	0e c0       	rjmp	.+28     	; 0x1c16 <GPIO_WritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value;
    1bfa:	e8 e3       	ldi	r30, 0x38	; 56
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	80 83       	st	Z, r24
    1c02:	09 c0       	rjmp	.+18     	; 0x1c16 <GPIO_WritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value;
    1c04:	e5 e3       	ldi	r30, 0x35	; 53
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	80 83       	st	Z, r24
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <GPIO_WritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value;
    1c0e:	e2 e3       	ldi	r30, 0x32	; 50
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <GPIO_FlipPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPort(uint8 PORTn)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <GPIO_FlipPort+0x6>
    1c2a:	0f 92       	push	r0
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	84 30       	cpi	r24, 0x04	; 4
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <GPIO_FlipPort+0x16>
    1c38:	3e c0       	rjmp	.+124    	; 0x1cb6 <GPIO_FlipPort+0x92>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	3b 83       	std	Y+3, r19	; 0x03
    1c42:	2a 83       	std	Y+2, r18	; 0x02
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	e9 f0       	breq	.+58     	; 0x1c88 <GPIO_FlipPort+0x64>
    1c4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c50:	3b 81       	ldd	r19, Y+3	; 0x03
    1c52:	22 30       	cpi	r18, 0x02	; 2
    1c54:	31 05       	cpc	r19, r1
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <GPIO_FlipPort+0x3e>
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	61 f0       	breq	.+24     	; 0x1c78 <GPIO_FlipPort+0x54>
    1c60:	2a c0       	rjmp	.+84     	; 0x1cb6 <GPIO_FlipPort+0x92>
    1c62:	2a 81       	ldd	r18, Y+2	; 0x02
    1c64:	3b 81       	ldd	r19, Y+3	; 0x03
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	b1 f0       	breq	.+44     	; 0x1c98 <GPIO_FlipPort+0x74>
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c70:	83 30       	cpi	r24, 0x03	; 3
    1c72:	91 05       	cpc	r25, r1
    1c74:	c9 f0       	breq	.+50     	; 0x1ca8 <GPIO_FlipPort+0x84>
    1c76:	1f c0       	rjmp	.+62     	; 0x1cb6 <GPIO_FlipPort+0x92>
		{
		case PORTA_ID:
			PORTA_REG = ~PORTA_REG;
    1c78:	ab e3       	ldi	r26, 0x3B	; 59
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	eb e3       	ldi	r30, 0x3B	; 59
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	80 95       	com	r24
    1c84:	8c 93       	st	X, r24
    1c86:	17 c0       	rjmp	.+46     	; 0x1cb6 <GPIO_FlipPort+0x92>
			break;
		case PORTB_ID:
			PORTB_REG = ~PORTB_REG;
    1c88:	a8 e3       	ldi	r26, 0x38	; 56
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e8 e3       	ldi	r30, 0x38	; 56
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 95       	com	r24
    1c94:	8c 93       	st	X, r24
    1c96:	0f c0       	rjmp	.+30     	; 0x1cb6 <GPIO_FlipPort+0x92>
			break;
		case PORTC_ID:
			PORTC_REG = ~PORTC_REG;
    1c98:	a5 e3       	ldi	r26, 0x35	; 53
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e5 e3       	ldi	r30, 0x35	; 53
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	80 95       	com	r24
    1ca4:	8c 93       	st	X, r24
    1ca6:	07 c0       	rjmp	.+14     	; 0x1cb6 <GPIO_FlipPort+0x92>
			break;
		case PORTD_ID:
			PORTD_REG = ~PORTD_REG;
    1ca8:	a2 e3       	ldi	r26, 0x32	; 50
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e2 e3       	ldi	r30, 0x32	; 50
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	80 95       	com	r24
    1cb4:	8c 93       	st	X, r24
			break;
		}
	}
}
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <GPIO_WriteLowNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteLowNibble(uint8 PORTn, uint8 value)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <GPIO_WriteLowNibble+0x6>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <GPIO_WriteLowNibble+0x8>
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	84 30       	cpi	r24, 0x04	; 4
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <GPIO_WriteLowNibble+0x18>
    1cd8:	61 c0       	rjmp	.+194    	; 0x1d9c <GPIO_WriteLowNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0x0F;
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	8f 70       	andi	r24, 0x0F	; 15
    1cde:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	3c 83       	std	Y+4, r19	; 0x04
    1ce8:	2b 83       	std	Y+3, r18	; 0x03
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	29 f1       	breq	.+74     	; 0x1d3e <GPIO_WriteLowNibble+0x7c>
    1cf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf8:	22 30       	cpi	r18, 0x02	; 2
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <GPIO_WriteLowNibble+0x46>
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	61 f0       	breq	.+24     	; 0x1d1e <GPIO_WriteLowNibble+0x5c>
    1d06:	4a c0       	rjmp	.+148    	; 0x1d9c <GPIO_WriteLowNibble+0xda>
    1d08:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0c:	22 30       	cpi	r18, 0x02	; 2
    1d0e:	31 05       	cpc	r19, r1
    1d10:	31 f1       	breq	.+76     	; 0x1d5e <GPIO_WriteLowNibble+0x9c>
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	83 30       	cpi	r24, 0x03	; 3
    1d18:	91 05       	cpc	r25, r1
    1d1a:	89 f1       	breq	.+98     	; 0x1d7e <GPIO_WriteLowNibble+0xbc>
    1d1c:	3f c0       	rjmp	.+126    	; 0x1d9c <GPIO_WriteLowNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0xF0;
    1d1e:	ab e3       	ldi	r26, 0x3B	; 59
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	eb e3       	ldi	r30, 0x3B	; 59
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 7f       	andi	r24, 0xF0	; 240
    1d2a:	8c 93       	st	X, r24
			PORTA_REG |= value;
    1d2c:	ab e3       	ldi	r26, 0x3B	; 59
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	eb e3       	ldi	r30, 0x3B	; 59
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	90 81       	ld	r25, Z
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	89 2b       	or	r24, r25
    1d3a:	8c 93       	st	X, r24
    1d3c:	2f c0       	rjmp	.+94     	; 0x1d9c <GPIO_WriteLowNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0xF0;
    1d3e:	a8 e3       	ldi	r26, 0x38	; 56
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e8 e3       	ldi	r30, 0x38	; 56
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	80 7f       	andi	r24, 0xF0	; 240
    1d4a:	8c 93       	st	X, r24
			PORTB_REG |= value;
    1d4c:	a8 e3       	ldi	r26, 0x38	; 56
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e8 e3       	ldi	r30, 0x38	; 56
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	90 81       	ld	r25, Z
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	89 2b       	or	r24, r25
    1d5a:	8c 93       	st	X, r24
    1d5c:	1f c0       	rjmp	.+62     	; 0x1d9c <GPIO_WriteLowNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0xF0;
    1d5e:	a5 e3       	ldi	r26, 0x35	; 53
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e5 e3       	ldi	r30, 0x35	; 53
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 7f       	andi	r24, 0xF0	; 240
    1d6a:	8c 93       	st	X, r24
			PORTC_REG |= value;
    1d6c:	a5 e3       	ldi	r26, 0x35	; 53
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e5 e3       	ldi	r30, 0x35	; 53
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	90 81       	ld	r25, Z
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	89 2b       	or	r24, r25
    1d7a:	8c 93       	st	X, r24
    1d7c:	0f c0       	rjmp	.+30     	; 0x1d9c <GPIO_WriteLowNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0xF0;
    1d7e:	a2 e3       	ldi	r26, 0x32	; 50
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e2 e3       	ldi	r30, 0x32	; 50
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	80 7f       	andi	r24, 0xF0	; 240
    1d8a:	8c 93       	st	X, r24
			PORTD_REG |= value;
    1d8c:	a2 e3       	ldi	r26, 0x32	; 50
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e2 e3       	ldi	r30, 0x32	; 50
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	90 81       	ld	r25, Z
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	89 2b       	or	r24, r25
    1d9a:	8c 93       	st	X, r24
			break;
		}
	}
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <GPIO_WriteHighNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteHighNibble(uint8 PORTn, uint8 value)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <GPIO_WriteHighNibble+0x6>
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <GPIO_WriteHighNibble+0x8>
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	84 30       	cpi	r24, 0x04	; 4
    1dbe:	08 f0       	brcs	.+2      	; 0x1dc2 <GPIO_WriteHighNibble+0x18>
    1dc0:	61 c0       	rjmp	.+194    	; 0x1e84 <GPIO_WriteHighNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0xF0;
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	80 7f       	andi	r24, 0xF0	; 240
    1dc6:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	3c 83       	std	Y+4, r19	; 0x04
    1dd0:	2b 83       	std	Y+3, r18	; 0x03
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	91 05       	cpc	r25, r1
    1dda:	29 f1       	breq	.+74     	; 0x1e26 <GPIO_WriteHighNibble+0x7c>
    1ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dde:	3c 81       	ldd	r19, Y+4	; 0x04
    1de0:	22 30       	cpi	r18, 0x02	; 2
    1de2:	31 05       	cpc	r19, r1
    1de4:	2c f4       	brge	.+10     	; 0x1df0 <GPIO_WriteHighNibble+0x46>
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	61 f0       	breq	.+24     	; 0x1e06 <GPIO_WriteHighNibble+0x5c>
    1dee:	4a c0       	rjmp	.+148    	; 0x1e84 <GPIO_WriteHighNibble+0xda>
    1df0:	2b 81       	ldd	r18, Y+3	; 0x03
    1df2:	3c 81       	ldd	r19, Y+4	; 0x04
    1df4:	22 30       	cpi	r18, 0x02	; 2
    1df6:	31 05       	cpc	r19, r1
    1df8:	31 f1       	breq	.+76     	; 0x1e46 <GPIO_WriteHighNibble+0x9c>
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	83 30       	cpi	r24, 0x03	; 3
    1e00:	91 05       	cpc	r25, r1
    1e02:	89 f1       	breq	.+98     	; 0x1e66 <GPIO_WriteHighNibble+0xbc>
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <GPIO_WriteHighNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0x0F;
    1e06:	ab e3       	ldi	r26, 0x3B	; 59
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	eb e3       	ldi	r30, 0x3B	; 59
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8f 70       	andi	r24, 0x0F	; 15
    1e12:	8c 93       	st	X, r24
			PORTA_REG |= value;
    1e14:	ab e3       	ldi	r26, 0x3B	; 59
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	eb e3       	ldi	r30, 0x3B	; 59
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	90 81       	ld	r25, Z
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	89 2b       	or	r24, r25
    1e22:	8c 93       	st	X, r24
    1e24:	2f c0       	rjmp	.+94     	; 0x1e84 <GPIO_WriteHighNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0x0F;
    1e26:	a8 e3       	ldi	r26, 0x38	; 56
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e8 e3       	ldi	r30, 0x38	; 56
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8f 70       	andi	r24, 0x0F	; 15
    1e32:	8c 93       	st	X, r24
			PORTB_REG |= value;
    1e34:	a8 e3       	ldi	r26, 0x38	; 56
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e8 e3       	ldi	r30, 0x38	; 56
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	90 81       	ld	r25, Z
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	89 2b       	or	r24, r25
    1e42:	8c 93       	st	X, r24
    1e44:	1f c0       	rjmp	.+62     	; 0x1e84 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0x0F;
    1e46:	a5 e3       	ldi	r26, 0x35	; 53
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e5 e3       	ldi	r30, 0x35	; 53
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 70       	andi	r24, 0x0F	; 15
    1e52:	8c 93       	st	X, r24
			PORTC_REG |= value;
    1e54:	a5 e3       	ldi	r26, 0x35	; 53
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e3       	ldi	r30, 0x35	; 53
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	90 81       	ld	r25, Z
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	89 2b       	or	r24, r25
    1e62:	8c 93       	st	X, r24
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0x0F;
    1e66:	a2 e3       	ldi	r26, 0x32	; 50
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e2 e3       	ldi	r30, 0x32	; 50
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8f 70       	andi	r24, 0x0F	; 15
    1e72:	8c 93       	st	X, r24
			PORTD_REG |= value;
    1e74:	a2 e3       	ldi	r26, 0x32	; 50
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e2 e3       	ldi	r30, 0x32	; 50
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	90 81       	ld	r25, Z
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	89 2b       	or	r24, r25
    1e82:	8c 93       	st	X, r24
			break;
		}
	}
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <__vector_16>:

/*******************************************************************************
 *                                 ADC_ISR
 *******************************************************************************/
ISR(ADC_vect)
{
    1e92:	1f 92       	push	r1
    1e94:	0f 92       	push	r0
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	0f 92       	push	r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	8f 93       	push	r24
    1e9e:	9f 93       	push	r25
    1ea0:	ef 93       	push	r30
    1ea2:	ff 93       	push	r31
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Data after conversion complete */
	g_adcResult = ADC_REG;
    1eac:	e4 e2       	ldi	r30, 0x24	; 36
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	90 93 91 01 	sts	0x0191, r25
    1eb8:	80 93 90 01 	sts	0x0190, r24
}
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	ff 91       	pop	r31
    1ec2:	ef 91       	pop	r30
    1ec4:	9f 91       	pop	r25
    1ec6:	8f 91       	pop	r24
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	1f 90       	pop	r1
    1ed0:	18 95       	reti

00001ed2 <ADC_Init>:
 * [DISCRIPTION]  : This function is responsible to initialization ADC.
 * [Args]  : void
 * [RUTURN]: Void
 */
void ADC_Init(void)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	ADMUX_REG &= ADC_VOLTAGE_REFERENCE_CLR;
	ADMUX_REG |= AVCC_VOLT;

	/* Select Vref = INTERNAL */
#elif ADC_VOLTAGE_REFERENCE_SELECTOR == INTERNAL_VOLT
	ADMUX_REG &= ADC_VOLTAGE_REFERENCE_CLR;
    1eda:	a7 e2       	ldi	r26, 0x27	; 39
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e7 e2       	ldi	r30, 0x27	; 39
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8f 73       	andi	r24, 0x3F	; 63
    1ee6:	8c 93       	st	X, r24
	ADMUX_REG |= INTERNAL_VOLT;
    1ee8:	a7 e2       	ldi	r26, 0x27	; 39
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e7 e2       	ldi	r30, 0x27	; 39
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	80 6c       	ori	r24, 0xC0	; 192
    1ef4:	8c 93       	st	X, r24
#endif

	/* select adjust result */
	/* select right adjust result */
#if ADC_ADJUST_RESULT_SELECTOR == RIGHT_ADJUST
	ADMUX_REG &= ADC_ADJUST_RESULT_CLR;
    1ef6:	a7 e2       	ldi	r26, 0x27	; 39
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e7 e2       	ldi	r30, 0x27	; 39
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	8f 7d       	andi	r24, 0xDF	; 223
    1f02:	8c 93       	st	X, r24
	ADMUX_REG |= RIGHT_ADJUST;
    1f04:	a7 e2       	ldi	r26, 0x27	; 39
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e7 e2       	ldi	r30, 0x27	; 39
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8c 93       	st	X, r24
#error("You Choose Wrong ADC Auto Trigger Source!")
#endif

#elif ADC_AUTO_TRIGGER_EN == DISABLE
	/* disable of trigger & Select single conversion */
	CLEAR_BIT(ADCSRA_REG, ADCSRA_ADATE);
    1f10:	a6 e2       	ldi	r26, 0x26	; 38
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e6 e2       	ldi	r30, 0x26	; 38
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8f 7d       	andi	r24, 0xDF	; 223
    1f1c:	8c 93       	st	X, r24
#else
#error("You Choose Wrong ADC Auto Trigger!")
#endif

	/* ADC interrupt disable */
	CLEAR_BIT(ADCSRA_REG, ADCSRA_ADIE);
    1f1e:	a6 e2       	ldi	r26, 0x26	; 38
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e6 e2       	ldi	r30, 0x26	; 38
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	87 7f       	andi	r24, 0xF7	; 247
    1f2a:	8c 93       	st	X, r24

	/* ADC Prescaler */
	/* ADC must operate in range 50-200Khz */
	ADCSRA_REG &= ADC_PRESCALER_CLR;
    1f2c:	a6 e2       	ldi	r26, 0x26	; 38
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e6 e2       	ldi	r30, 0x26	; 38
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	88 7f       	andi	r24, 0xF8	; 248
    1f38:	8c 93       	st	X, r24
	ADCSRA_REG |= ADC_PRESCALER_SELECTOR;
    1f3a:	a6 e2       	ldi	r26, 0x26	; 38
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e6 e2       	ldi	r30, 0x26	; 38
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	83 60       	ori	r24, 0x03	; 3
    1f46:	8c 93       	st	X, r24

	/* Enable ADC */
	SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    1f48:	a6 e2       	ldi	r26, 0x26	; 38
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e6 e2       	ldi	r30, 0x26	; 38
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 68       	ori	r24, 0x80	; 128
    1f54:	8c 93       	st	X, r24
}
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <ADC_readChannelSynch>:
 * [DISCRIPTION]  : This function is responsible to Start ADC Conversion Synchronous.
 * [Args]  : uint8 Number of Channel
 * [RUTURN]: uint16 the digital value
 */
uint16 ADC_readChannelSynch(uint8 channel_num)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	0f 92       	push	r0
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= ADC_CHANNEL_CLR; /* Input channel number must be from 0 --> 7 */
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	87 70       	andi	r24, 0x07	; 7
    1f6c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG &= ADC_MUX_CHANNEL_CLR; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1f6e:	a7 e2       	ldi	r26, 0x27	; 39
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e7 e2       	ldi	r30, 0x27	; 39
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	80 7e       	andi	r24, 0xE0	; 224
    1f7a:	8c 93       	st	X, r24
	ADMUX_REG |= channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1f7c:	a7 e2       	ldi	r26, 0x27	; 39
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e7 e2       	ldi	r30, 0x27	; 39
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	90 81       	ld	r25, Z
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	89 2b       	or	r24, r25
    1f8a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC); /* Start conversion write '1' to ADSC */
    1f8c:	a6 e2       	ldi	r26, 0x26	; 38
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e6 e2       	ldi	r30, 0x26	; 38
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	80 64       	ori	r24, 0x40	; 64
    1f98:	8c 93       	st	X, r24
	while((GET_BIT(ADCSRA_REG, ADCSRA_ADIF)) == 0); /* Wait for conversion to complete, ADIF becomes '1' */
    1f9a:	e6 e2       	ldi	r30, 0x26	; 38
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	82 95       	swap	r24
    1fa2:	8f 70       	andi	r24, 0x0F	; 15
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	81 70       	andi	r24, 0x01	; 1
    1faa:	90 70       	andi	r25, 0x00	; 0
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	a9 f3       	breq	.-22     	; 0x1f9a <ADC_readChannelSynch+0x3e>
	SET_BIT(ADCSRA_REG, ADCSRA_ADIF); /* Clear ADIF by write '1' to it :) */
    1fb0:	a6 e2       	ldi	r26, 0x26	; 38
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e6 e2       	ldi	r30, 0x26	; 38
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	80 61       	ori	r24, 0x10	; 16
    1fbc:	8c 93       	st	X, r24
	return ADC_REG; /* Read the digital value from the data register */
    1fbe:	e4 e2       	ldi	r30, 0x24	; 36
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	91 81       	ldd	r25, Z+1	; 0x01
}
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <ADC_readChannelAsynch>:
 * [DISCRIPTION]  : This function is responsible to Start ADC Conversion Asynchronous.
 * [Args]  : uint8 Number of Channel
 * [RUTURN]: void
 */
void ADC_readChannelAsynch(uint8 channel_num)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	0f 92       	push	r0
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= ADC_CHANNEL_CLR; /* Input channel number must be from 0 --> 7 */
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	87 70       	andi	r24, 0x07	; 7
    1fde:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG &= ADC_MUX_CHANNEL_CLR; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1fe0:	a7 e2       	ldi	r26, 0x27	; 39
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e7 e2       	ldi	r30, 0x27	; 39
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 7e       	andi	r24, 0xE0	; 224
    1fec:	8c 93       	st	X, r24
	ADMUX_REG |= channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1fee:	a7 e2       	ldi	r26, 0x27	; 39
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e7 e2       	ldi	r30, 0x27	; 39
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	90 81       	ld	r25, Z
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	89 2b       	or	r24, r25
    1ffc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC); /* Start conversion write '1' to ADSC */
    1ffe:	a6 e2       	ldi	r26, 0x26	; 38
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e6 e2       	ldi	r30, 0x26	; 38
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 64       	ori	r24, 0x40	; 64
    200a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADCSRA_ADIE);
    200c:	a6 e2       	ldi	r26, 0x26	; 38
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e6 e2       	ldi	r30, 0x26	; 38
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	88 60       	ori	r24, 0x08	; 8
    2018:	8c 93       	st	X, r24
}
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <TEMP_Init>:
 	 	 	 	to read the temperature.
 [Args]: void
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void TEMP_Init(void)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	ADC_Init();
    202a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ADC_Init>
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <TEMP_getValue>:
 [DISCRIPTION]:	This function is responsible for calculate the temperature from the ADC digital value.
 [Args]: void
 [RUTURN]: uint8  temperature value
 ---------------------------------------------------------------------------------------*/
uint8 TEMP_getValue(void)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <TEMP_getValue+0x6>
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    2040:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    2042:	1a 82       	std	Y+2, r1	; 0x02
    2044:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannelSynch(SENSOR_CHANNEL_ID);
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <ADC_readChannelSynch>
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	cc 01       	movw	r24, r24
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	26 e9       	ldi	r18, 0x96	; 150
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	50 e0       	ldi	r21, 0x00	; 0
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <__mulsi3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	2a e0       	ldi	r18, 0x0A	; 10
    2080:	37 ed       	ldi	r19, 0xD7	; 215
    2082:	43 e2       	ldi	r20, 0x23	; 35
    2084:	50 e4       	ldi	r21, 0x40	; 64
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 ed       	ldi	r19, 0xD0	; 208
    2096:	4f eb       	ldi	r20, 0xBF	; 191
    2098:	54 e4       	ldi	r21, 0x44	; 68
    209a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <LCD_init>:
  	  	  	 2. Setup the LCD Data Mode 4-bits or 8-bits.
 [Args]: void
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_init(void)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_SetPinDir(LCD_RS_PORT_ID, LCD_RS_PIN_ID, pin_output);
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 4f 0a 	call	0x149e	; 0x149e <GPIO_SetPinDir>
	GPIO_SetPinDir(LCD_RW_PORT_ID, LCD_RW_PIN_ID, pin_output);
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	0e 94 4f 0a 	call	0x149e	; 0x149e <GPIO_SetPinDir>
	GPIO_SetPinDir(LCD_E_PORT_ID, LCD_E_PIN_ID, pin_output);
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	62 e0       	ldi	r22, 0x02	; 2
    20de:	41 e0       	ldi	r20, 0x01	; 1
    20e0:	0e 94 4f 0a 	call	0x149e	; 0x149e <GPIO_SetPinDir>
	/* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_SetPortDir(LCD_DATA_PORT_ID, port_output);
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	6f ef       	ldi	r22, 0xFF	; 255
    20e8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_SetPortDir>
	 /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    20ec:	88 e3       	ldi	r24, 0x38	; 56
    20ee:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_sendCommand>
#endif

	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    20f2:	8c e0       	ldi	r24, 0x0C	; 12
    20f4:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_sendCommand>
	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_sendCommand>
}
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <LCD_sendCommand>:
 [DISCRIPTION]:	Send the required command to the screen
  [Args]: uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_sendCommand(uint8 command)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	e9 97       	sbiw	r28, 0x39	; 57
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	89 af       	std	Y+57, r24	; 0x39

	GPIO_WritePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
	GPIO_WritePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /* write data to LCD so RW=0 */
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e8       	ldi	r26, 0x80	; 128
    2134:	bf e3       	ldi	r27, 0x3F	; 63
    2136:	8d ab       	std	Y+53, r24	; 0x35
    2138:	9e ab       	std	Y+54, r25	; 0x36
    213a:	af ab       	std	Y+55, r26	; 0x37
    213c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6d a9       	ldd	r22, Y+53	; 0x35
    2140:	7e a9       	ldd	r23, Y+54	; 0x36
    2142:	8f a9       	ldd	r24, Y+55	; 0x37
    2144:	98 ad       	ldd	r25, Y+56	; 0x38
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a e7       	ldi	r20, 0x7A	; 122
    214c:	53 e4       	ldi	r21, 0x43	; 67
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	89 ab       	std	Y+49, r24	; 0x31
    2158:	9a ab       	std	Y+50, r25	; 0x32
    215a:	ab ab       	std	Y+51, r26	; 0x33
    215c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    215e:	69 a9       	ldd	r22, Y+49	; 0x31
    2160:	7a a9       	ldd	r23, Y+50	; 0x32
    2162:	8b a9       	ldd	r24, Y+51	; 0x33
    2164:	9c a9       	ldd	r25, Y+52	; 0x34
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	98 ab       	std	Y+48, r25	; 0x30
    217c:	8f a7       	std	Y+47, r24	; 0x2f
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6d a9       	ldd	r22, Y+53	; 0x35
    219a:	7e a9       	ldd	r23, Y+54	; 0x36
    219c:	8f a9       	ldd	r24, Y+55	; 0x37
    219e:	98 ad       	ldd	r25, Y+56	; 0x38
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	98 ab       	std	Y+48, r25	; 0x30
    21be:	8f a7       	std	Y+47, r24	; 0x2f
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <LCD_sendCommand+0xdc>
    21c2:	89 e1       	ldi	r24, 0x19	; 25
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9e a7       	std	Y+46, r25	; 0x2e
    21c8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    21cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_sendCommand+0xca>
    21d2:	9e a7       	std	Y+46, r25	; 0x2e
    21d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d8:	98 a9       	ldd	r25, Y+48	; 0x30
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	98 ab       	std	Y+48, r25	; 0x30
    21de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e2:	98 a9       	ldd	r25, Y+48	; 0x30
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <LCD_sendCommand+0xbe>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	69 a9       	ldd	r22, Y+49	; 0x31
    21ec:	7a a9       	ldd	r23, Y+50	; 0x32
    21ee:	8b a9       	ldd	r24, Y+51	; 0x33
    21f0:	9c a9       	ldd	r25, Y+52	; 0x34
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	98 ab       	std	Y+48, r25	; 0x30
    21fc:	8f a7       	std	Y+47, r24	; 0x2f
    21fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2200:	98 a9       	ldd	r25, Y+48	; 0x30
    2202:	9c a7       	std	Y+44, r25	; 0x2c
    2204:	8b a7       	std	Y+43, r24	; 0x2b
    2206:	8b a5       	ldd	r24, Y+43	; 0x2b
    2208:	9c a5       	ldd	r25, Y+44	; 0x2c
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_sendCommand+0x106>
    220e:	9c a7       	std	Y+44, r25	; 0x2c
    2210:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	62 e0       	ldi	r22, 0x02	; 2
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a0 e8       	ldi	r26, 0x80	; 128
    2222:	bf e3       	ldi	r27, 0x3F	; 63
    2224:	8f a3       	std	Y+39, r24	; 0x27
    2226:	98 a7       	std	Y+40, r25	; 0x28
    2228:	a9 a7       	std	Y+41, r26	; 0x29
    222a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6f a1       	ldd	r22, Y+39	; 0x27
    222e:	78 a5       	ldd	r23, Y+40	; 0x28
    2230:	89 a5       	ldd	r24, Y+41	; 0x29
    2232:	9a a5       	ldd	r25, Y+42	; 0x2a
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a e7       	ldi	r20, 0x7A	; 122
    223a:	53 e4       	ldi	r21, 0x43	; 67
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8b a3       	std	Y+35, r24	; 0x23
    2246:	9c a3       	std	Y+36, r25	; 0x24
    2248:	ad a3       	std	Y+37, r26	; 0x25
    224a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    224c:	6b a1       	ldd	r22, Y+35	; 0x23
    224e:	7c a1       	ldd	r23, Y+36	; 0x24
    2250:	8d a1       	ldd	r24, Y+37	; 0x25
    2252:	9e a1       	ldd	r25, Y+38	; 0x26
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <LCD_sendCommand+0x16a>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9a a3       	std	Y+34, r25	; 0x22
    226a:	89 a3       	std	Y+33, r24	; 0x21
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    226e:	6b a1       	ldd	r22, Y+35	; 0x23
    2270:	7c a1       	ldd	r23, Y+36	; 0x24
    2272:	8d a1       	ldd	r24, Y+37	; 0x25
    2274:	9e a1       	ldd	r25, Y+38	; 0x26
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6f a1       	ldd	r22, Y+39	; 0x27
    2288:	78 a5       	ldd	r23, Y+40	; 0x28
    228a:	89 a5       	ldd	r24, Y+41	; 0x29
    228c:	9a a5       	ldd	r25, Y+42	; 0x2a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9a a3       	std	Y+34, r25	; 0x22
    22ac:	89 a3       	std	Y+33, r24	; 0x21
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <LCD_sendCommand+0x1ca>
    22b0:	89 e1       	ldi	r24, 0x19	; 25
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	98 a3       	std	Y+32, r25	; 0x20
    22b6:	8f 8f       	std	Y+31, r24	; 0x1f
    22b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ba:	98 a1       	ldd	r25, Y+32	; 0x20
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_sendCommand+0x1b8>
    22c0:	98 a3       	std	Y+32, r25	; 0x20
    22c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	89 a1       	ldd	r24, Y+33	; 0x21
    22c6:	9a a1       	ldd	r25, Y+34	; 0x22
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9a a3       	std	Y+34, r25	; 0x22
    22cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	89 a1       	ldd	r24, Y+33	; 0x21
    22d0:	9a a1       	ldd	r25, Y+34	; 0x22
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <LCD_sendCommand+0x1ac>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6b a1       	ldd	r22, Y+35	; 0x23
    22da:	7c a1       	ldd	r23, Y+36	; 0x24
    22dc:	8d a1       	ldd	r24, Y+37	; 0x25
    22de:	9e a1       	ldd	r25, Y+38	; 0x26
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9a a3       	std	Y+34, r25	; 0x22
    22ea:	89 a3       	std	Y+33, r24	; 0x21
    22ec:	89 a1       	ldd	r24, Y+33	; 0x21
    22ee:	9a a1       	ldd	r25, Y+34	; 0x22
    22f0:	9e 8f       	std	Y+30, r25	; 0x1e
    22f2:	8d 8f       	std	Y+29, r24	; 0x1d
    22f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_sendCommand+0x1f4>
    22fc:	9e 8f       	std	Y+30, r25	; 0x1e
    22fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_WritePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	69 ad       	ldd	r22, Y+57	; 0x39
    2304:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <GPIO_WritePort>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a0 e8       	ldi	r26, 0x80	; 128
    230e:	bf e3       	ldi	r27, 0x3F	; 63
    2310:	89 8f       	std	Y+25, r24	; 0x19
    2312:	9a 8f       	std	Y+26, r25	; 0x1a
    2314:	ab 8f       	std	Y+27, r26	; 0x1b
    2316:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2318:	69 8d       	ldd	r22, Y+25	; 0x19
    231a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    231c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a e7       	ldi	r20, 0x7A	; 122
    2326:	53 e4       	ldi	r21, 0x43	; 67
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8d 8b       	std	Y+21, r24	; 0x15
    2332:	9e 8b       	std	Y+22, r25	; 0x16
    2334:	af 8b       	std	Y+23, r26	; 0x17
    2336:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2338:	6d 89       	ldd	r22, Y+21	; 0x15
    233a:	7e 89       	ldd	r23, Y+22	; 0x16
    233c:	8f 89       	ldd	r24, Y+23	; 0x17
    233e:	98 8d       	ldd	r25, Y+24	; 0x18
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5f e3       	ldi	r21, 0x3F	; 63
    2348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234c:	88 23       	and	r24, r24
    234e:	2c f4       	brge	.+10     	; 0x235a <LCD_sendCommand+0x256>
		__ticks = 1;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9c 8b       	std	Y+20, r25	; 0x14
    2356:	8b 8b       	std	Y+19, r24	; 0x13
    2358:	3f c0       	rjmp	.+126    	; 0x23d8 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    235a:	6d 89       	ldd	r22, Y+21	; 0x15
    235c:	7e 89       	ldd	r23, Y+22	; 0x16
    235e:	8f 89       	ldd	r24, Y+23	; 0x17
    2360:	98 8d       	ldd	r25, Y+24	; 0x18
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	3f ef       	ldi	r19, 0xFF	; 255
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	57 e4       	ldi	r21, 0x47	; 71
    236a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236e:	18 16       	cp	r1, r24
    2370:	4c f5       	brge	.+82     	; 0x23c4 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	69 8d       	ldd	r22, Y+25	; 0x19
    2374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e2       	ldi	r20, 0x20	; 32
    2380:	51 e4       	ldi	r21, 0x41	; 65
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9c 8b       	std	Y+20, r25	; 0x14
    2398:	8b 8b       	std	Y+19, r24	; 0x13
    239a:	0f c0       	rjmp	.+30     	; 0x23ba <LCD_sendCommand+0x2b6>
    239c:	89 e1       	ldi	r24, 0x19	; 25
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9a 8b       	std	Y+18, r25	; 0x12
    23a2:	89 8b       	std	Y+17, r24	; 0x11
    23a4:	89 89       	ldd	r24, Y+17	; 0x11
    23a6:	9a 89       	ldd	r25, Y+18	; 0x12
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_sendCommand+0x2a4>
    23ac:	9a 8b       	std	Y+18, r25	; 0x12
    23ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b0:	8b 89       	ldd	r24, Y+19	; 0x13
    23b2:	9c 89       	ldd	r25, Y+20	; 0x14
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	9c 8b       	std	Y+20, r25	; 0x14
    23b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	8b 89       	ldd	r24, Y+19	; 0x13
    23bc:	9c 89       	ldd	r25, Y+20	; 0x14
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	69 f7       	brne	.-38     	; 0x239c <LCD_sendCommand+0x298>
    23c2:	14 c0       	rjmp	.+40     	; 0x23ec <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c4:	6d 89       	ldd	r22, Y+21	; 0x15
    23c6:	7e 89       	ldd	r23, Y+22	; 0x16
    23c8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ca:	98 8d       	ldd	r25, Y+24	; 0x18
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9c 8b       	std	Y+20, r25	; 0x14
    23d6:	8b 8b       	std	Y+19, r24	; 0x13
    23d8:	8b 89       	ldd	r24, Y+19	; 0x13
    23da:	9c 89       	ldd	r25, Y+20	; 0x14
    23dc:	98 8b       	std	Y+16, r25	; 0x10
    23de:	8f 87       	std	Y+15, r24	; 0x0f
    23e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e2:	98 89       	ldd	r25, Y+16	; 0x10
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <LCD_sendCommand+0x2e0>
    23e8:	98 8b       	std	Y+16, r25	; 0x10
    23ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	62 e0       	ldi	r22, 0x02	; 2
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	a0 e8       	ldi	r26, 0x80	; 128
    23fc:	bf e3       	ldi	r27, 0x3F	; 63
    23fe:	8b 87       	std	Y+11, r24	; 0x0b
    2400:	9c 87       	std	Y+12, r25	; 0x0c
    2402:	ad 87       	std	Y+13, r26	; 0x0d
    2404:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2406:	6b 85       	ldd	r22, Y+11	; 0x0b
    2408:	7c 85       	ldd	r23, Y+12	; 0x0c
    240a:	8d 85       	ldd	r24, Y+13	; 0x0d
    240c:	9e 85       	ldd	r25, Y+14	; 0x0e
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a e7       	ldi	r20, 0x7A	; 122
    2414:	53 e4       	ldi	r21, 0x43	; 67
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	8f 83       	std	Y+7, r24	; 0x07
    2420:	98 87       	std	Y+8, r25	; 0x08
    2422:	a9 87       	std	Y+9, r26	; 0x09
    2424:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2426:	6f 81       	ldd	r22, Y+7	; 0x07
    2428:	78 85       	ldd	r23, Y+8	; 0x08
    242a:	89 85       	ldd	r24, Y+9	; 0x09
    242c:	9a 85       	ldd	r25, Y+10	; 0x0a
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e8       	ldi	r20, 0x80	; 128
    2434:	5f e3       	ldi	r21, 0x3F	; 63
    2436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    243a:	88 23       	and	r24, r24
    243c:	2c f4       	brge	.+10     	; 0x2448 <LCD_sendCommand+0x344>
		__ticks = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
    2446:	3f c0       	rjmp	.+126    	; 0x24c6 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	78 85       	ldd	r23, Y+8	; 0x08
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	4c f5       	brge	.+82     	; 0x24b2 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	6b 85       	ldd	r22, Y+11	; 0x0b
    2462:	7c 85       	ldd	r23, Y+12	; 0x0c
    2464:	8d 85       	ldd	r24, Y+13	; 0x0d
    2466:	9e 85       	ldd	r25, Y+14	; 0x0e
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e2       	ldi	r20, 0x20	; 32
    246e:	51 e4       	ldi	r21, 0x41	; 65
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	0f c0       	rjmp	.+30     	; 0x24a8 <LCD_sendCommand+0x3a4>
    248a:	89 e1       	ldi	r24, 0x19	; 25
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	8b 83       	std	Y+3, r24	; 0x03
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_sendCommand+0x392>
    249a:	9c 83       	std	Y+4, r25	; 0x04
    249c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	9e 81       	ldd	r25, Y+6	; 0x06
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	69 f7       	brne	.-38     	; 0x248a <LCD_sendCommand+0x386>
    24b0:	14 c0       	rjmp	.+40     	; 0x24da <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	6f 81       	ldd	r22, Y+7	; 0x07
    24b4:	78 85       	ldd	r23, Y+8	; 0x08
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_sendCommand+0x3ce>
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24da:	e9 96       	adiw	r28, 0x39	; 57
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <LCD_displayCharacter>:
 [DISCRIPTION]:	Display the required character on the screen
  [Args]: uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayCharacter(uint8 data)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	e9 97       	sbiw	r28, 0x39	; 57
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	89 af       	std	Y+57, r24	; 0x39
	GPIO_WritePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
	GPIO_WritePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /* write data to LCD so RW=0 */
    250c:	83 e0       	ldi	r24, 0x03	; 3
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e8       	ldi	r26, 0x80	; 128
    251c:	bf e3       	ldi	r27, 0x3F	; 63
    251e:	8d ab       	std	Y+53, r24	; 0x35
    2520:	9e ab       	std	Y+54, r25	; 0x36
    2522:	af ab       	std	Y+55, r26	; 0x37
    2524:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	6d a9       	ldd	r22, Y+53	; 0x35
    2528:	7e a9       	ldd	r23, Y+54	; 0x36
    252a:	8f a9       	ldd	r24, Y+55	; 0x37
    252c:	98 ad       	ldd	r25, Y+56	; 0x38
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a e7       	ldi	r20, 0x7A	; 122
    2534:	53 e4       	ldi	r21, 0x43	; 67
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	89 ab       	std	Y+49, r24	; 0x31
    2540:	9a ab       	std	Y+50, r25	; 0x32
    2542:	ab ab       	std	Y+51, r26	; 0x33
    2544:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2546:	69 a9       	ldd	r22, Y+49	; 0x31
    2548:	7a a9       	ldd	r23, Y+50	; 0x32
    254a:	8b a9       	ldd	r24, Y+51	; 0x33
    254c:	9c a9       	ldd	r25, Y+52	; 0x34
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	2c f4       	brge	.+10     	; 0x2568 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	98 ab       	std	Y+48, r25	; 0x30
    2564:	8f a7       	std	Y+47, r24	; 0x2f
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2568:	69 a9       	ldd	r22, Y+49	; 0x31
    256a:	7a a9       	ldd	r23, Y+50	; 0x32
    256c:	8b a9       	ldd	r24, Y+51	; 0x33
    256e:	9c a9       	ldd	r25, Y+52	; 0x34
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	4c f5       	brge	.+82     	; 0x25d2 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	6d a9       	ldd	r22, Y+53	; 0x35
    2582:	7e a9       	ldd	r23, Y+54	; 0x36
    2584:	8f a9       	ldd	r24, Y+55	; 0x37
    2586:	98 ad       	ldd	r25, Y+56	; 0x38
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	98 ab       	std	Y+48, r25	; 0x30
    25a6:	8f a7       	std	Y+47, r24	; 0x2f
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <LCD_displayCharacter+0xdc>
    25aa:	89 e1       	ldi	r24, 0x19	; 25
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9e a7       	std	Y+46, r25	; 0x2e
    25b0:	8d a7       	std	Y+45, r24	; 0x2d
    25b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    25b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_displayCharacter+0xca>
    25ba:	9e a7       	std	Y+46, r25	; 0x2e
    25bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c0:	98 a9       	ldd	r25, Y+48	; 0x30
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	98 ab       	std	Y+48, r25	; 0x30
    25c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ca:	98 a9       	ldd	r25, Y+48	; 0x30
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	69 f7       	brne	.-38     	; 0x25aa <LCD_displayCharacter+0xbe>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	69 a9       	ldd	r22, Y+49	; 0x31
    25d4:	7a a9       	ldd	r23, Y+50	; 0x32
    25d6:	8b a9       	ldd	r24, Y+51	; 0x33
    25d8:	9c a9       	ldd	r25, Y+52	; 0x34
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	98 ab       	std	Y+48, r25	; 0x30
    25e4:	8f a7       	std	Y+47, r24	; 0x2f
    25e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ea:	9c a7       	std	Y+44, r25	; 0x2c
    25ec:	8b a7       	std	Y+43, r24	; 0x2b
    25ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    25f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_displayCharacter+0x106>
    25f6:	9c a7       	std	Y+44, r25	; 0x2c
    25f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    25fa:	83 e0       	ldi	r24, 0x03	; 3
    25fc:	62 e0       	ldi	r22, 0x02	; 2
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e8       	ldi	r26, 0x80	; 128
    260a:	bf e3       	ldi	r27, 0x3F	; 63
    260c:	8f a3       	std	Y+39, r24	; 0x27
    260e:	98 a7       	std	Y+40, r25	; 0x28
    2610:	a9 a7       	std	Y+41, r26	; 0x29
    2612:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	6f a1       	ldd	r22, Y+39	; 0x27
    2616:	78 a5       	ldd	r23, Y+40	; 0x28
    2618:	89 a5       	ldd	r24, Y+41	; 0x29
    261a:	9a a5       	ldd	r25, Y+42	; 0x2a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	53 e4       	ldi	r21, 0x43	; 67
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8b a3       	std	Y+35, r24	; 0x23
    262e:	9c a3       	std	Y+36, r25	; 0x24
    2630:	ad a3       	std	Y+37, r26	; 0x25
    2632:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2634:	6b a1       	ldd	r22, Y+35	; 0x23
    2636:	7c a1       	ldd	r23, Y+36	; 0x24
    2638:	8d a1       	ldd	r24, Y+37	; 0x25
    263a:	9e a1       	ldd	r25, Y+38	; 0x26
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9a a3       	std	Y+34, r25	; 0x22
    2652:	89 a3       	std	Y+33, r24	; 0x21
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2656:	6b a1       	ldd	r22, Y+35	; 0x23
    2658:	7c a1       	ldd	r23, Y+36	; 0x24
    265a:	8d a1       	ldd	r24, Y+37	; 0x25
    265c:	9e a1       	ldd	r25, Y+38	; 0x26
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	6f a1       	ldd	r22, Y+39	; 0x27
    2670:	78 a5       	ldd	r23, Y+40	; 0x28
    2672:	89 a5       	ldd	r24, Y+41	; 0x29
    2674:	9a a5       	ldd	r25, Y+42	; 0x2a
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9a a3       	std	Y+34, r25	; 0x22
    2694:	89 a3       	std	Y+33, r24	; 0x21
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <LCD_displayCharacter+0x1ca>
    2698:	89 e1       	ldi	r24, 0x19	; 25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	98 a3       	std	Y+32, r25	; 0x20
    269e:	8f 8f       	std	Y+31, r24	; 0x1f
    26a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a2:	98 a1       	ldd	r25, Y+32	; 0x20
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_displayCharacter+0x1b8>
    26a8:	98 a3       	std	Y+32, r25	; 0x20
    26aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	89 a1       	ldd	r24, Y+33	; 0x21
    26ae:	9a a1       	ldd	r25, Y+34	; 0x22
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9a a3       	std	Y+34, r25	; 0x22
    26b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	89 a1       	ldd	r24, Y+33	; 0x21
    26b8:	9a a1       	ldd	r25, Y+34	; 0x22
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <LCD_displayCharacter+0x1ac>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6b a1       	ldd	r22, Y+35	; 0x23
    26c2:	7c a1       	ldd	r23, Y+36	; 0x24
    26c4:	8d a1       	ldd	r24, Y+37	; 0x25
    26c6:	9e a1       	ldd	r25, Y+38	; 0x26
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9a a3       	std	Y+34, r25	; 0x22
    26d2:	89 a3       	std	Y+33, r24	; 0x21
    26d4:	89 a1       	ldd	r24, Y+33	; 0x21
    26d6:	9a a1       	ldd	r25, Y+34	; 0x22
    26d8:	9e 8f       	std	Y+30, r25	; 0x1e
    26da:	8d 8f       	std	Y+29, r24	; 0x1d
    26dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_displayCharacter+0x1f4>
    26e4:	9e 8f       	std	Y+30, r25	; 0x1e
    26e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_WritePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	69 ad       	ldd	r22, Y+57	; 0x39
    26ec:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <GPIO_WritePort>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a0 e8       	ldi	r26, 0x80	; 128
    26f6:	bf e3       	ldi	r27, 0x3F	; 63
    26f8:	89 8f       	std	Y+25, r24	; 0x19
    26fa:	9a 8f       	std	Y+26, r25	; 0x1a
    26fc:	ab 8f       	std	Y+27, r26	; 0x1b
    26fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2700:	69 8d       	ldd	r22, Y+25	; 0x19
    2702:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2704:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	4a e7       	ldi	r20, 0x7A	; 122
    270e:	53 e4       	ldi	r21, 0x43	; 67
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	8d 8b       	std	Y+21, r24	; 0x15
    271a:	9e 8b       	std	Y+22, r25	; 0x16
    271c:	af 8b       	std	Y+23, r26	; 0x17
    271e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2720:	6d 89       	ldd	r22, Y+21	; 0x15
    2722:	7e 89       	ldd	r23, Y+22	; 0x16
    2724:	8f 89       	ldd	r24, Y+23	; 0x17
    2726:	98 8d       	ldd	r25, Y+24	; 0x18
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	2c f4       	brge	.+10     	; 0x2742 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9c 8b       	std	Y+20, r25	; 0x14
    273e:	8b 8b       	std	Y+19, r24	; 0x13
    2740:	3f c0       	rjmp	.+126    	; 0x27c0 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2742:	6d 89       	ldd	r22, Y+21	; 0x15
    2744:	7e 89       	ldd	r23, Y+22	; 0x16
    2746:	8f 89       	ldd	r24, Y+23	; 0x17
    2748:	98 8d       	ldd	r25, Y+24	; 0x18
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	4c f5       	brge	.+82     	; 0x27ac <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	69 8d       	ldd	r22, Y+25	; 0x19
    275c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9c 8b       	std	Y+20, r25	; 0x14
    2780:	8b 8b       	std	Y+19, r24	; 0x13
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <LCD_displayCharacter+0x2b6>
    2784:	89 e1       	ldi	r24, 0x19	; 25
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9a 8b       	std	Y+18, r25	; 0x12
    278a:	89 8b       	std	Y+17, r24	; 0x11
    278c:	89 89       	ldd	r24, Y+17	; 0x11
    278e:	9a 89       	ldd	r25, Y+18	; 0x12
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_displayCharacter+0x2a4>
    2794:	9a 8b       	std	Y+18, r25	; 0x12
    2796:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	8b 89       	ldd	r24, Y+19	; 0x13
    279a:	9c 89       	ldd	r25, Y+20	; 0x14
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	9c 8b       	std	Y+20, r25	; 0x14
    27a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a2:	8b 89       	ldd	r24, Y+19	; 0x13
    27a4:	9c 89       	ldd	r25, Y+20	; 0x14
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	69 f7       	brne	.-38     	; 0x2784 <LCD_displayCharacter+0x298>
    27aa:	14 c0       	rjmp	.+40     	; 0x27d4 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ac:	6d 89       	ldd	r22, Y+21	; 0x15
    27ae:	7e 89       	ldd	r23, Y+22	; 0x16
    27b0:	8f 89       	ldd	r24, Y+23	; 0x17
    27b2:	98 8d       	ldd	r25, Y+24	; 0x18
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9c 8b       	std	Y+20, r25	; 0x14
    27be:	8b 8b       	std	Y+19, r24	; 0x13
    27c0:	8b 89       	ldd	r24, Y+19	; 0x13
    27c2:	9c 89       	ldd	r25, Y+20	; 0x14
    27c4:	98 8b       	std	Y+16, r25	; 0x10
    27c6:	8f 87       	std	Y+15, r24	; 0x0f
    27c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ca:	98 89       	ldd	r25, Y+16	; 0x10
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_displayCharacter+0x2e0>
    27d0:	98 8b       	std	Y+16, r25	; 0x10
    27d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    27d4:	83 e0       	ldi	r24, 0x03	; 3
    27d6:	62 e0       	ldi	r22, 0x02	; 2
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a0 e8       	ldi	r26, 0x80	; 128
    27e4:	bf e3       	ldi	r27, 0x3F	; 63
    27e6:	8b 87       	std	Y+11, r24	; 0x0b
    27e8:	9c 87       	std	Y+12, r25	; 0x0c
    27ea:	ad 87       	std	Y+13, r26	; 0x0d
    27ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	4a e7       	ldi	r20, 0x7A	; 122
    27fc:	53 e4       	ldi	r21, 0x43	; 67
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	8f 83       	std	Y+7, r24	; 0x07
    2808:	98 87       	std	Y+8, r25	; 0x08
    280a:	a9 87       	std	Y+9, r26	; 0x09
    280c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e8       	ldi	r20, 0x80	; 128
    281c:	5f e3       	ldi	r21, 0x3F	; 63
    281e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2822:	88 23       	and	r24, r24
    2824:	2c f4       	brge	.+10     	; 0x2830 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	9e 83       	std	Y+6, r25	; 0x06
    282c:	8d 83       	std	Y+5, r24	; 0x05
    282e:	3f c0       	rjmp	.+126    	; 0x28ae <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2830:	6f 81       	ldd	r22, Y+7	; 0x07
    2832:	78 85       	ldd	r23, Y+8	; 0x08
    2834:	89 85       	ldd	r24, Y+9	; 0x09
    2836:	9a 85       	ldd	r25, Y+10	; 0x0a
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	3f ef       	ldi	r19, 0xFF	; 255
    283c:	4f e7       	ldi	r20, 0x7F	; 127
    283e:	57 e4       	ldi	r21, 0x47	; 71
    2840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2844:	18 16       	cp	r1, r24
    2846:	4c f5       	brge	.+82     	; 0x289a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2848:	6b 85       	ldd	r22, Y+11	; 0x0b
    284a:	7c 85       	ldd	r23, Y+12	; 0x0c
    284c:	8d 85       	ldd	r24, Y+13	; 0x0d
    284e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e2       	ldi	r20, 0x20	; 32
    2856:	51 e4       	ldi	r21, 0x41	; 65
    2858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	bc 01       	movw	r22, r24
    2862:	cd 01       	movw	r24, r26
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	9e 83       	std	Y+6, r25	; 0x06
    286e:	8d 83       	std	Y+5, r24	; 0x05
    2870:	0f c0       	rjmp	.+30     	; 0x2890 <LCD_displayCharacter+0x3a4>
    2872:	89 e1       	ldi	r24, 0x19	; 25
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	9c 83       	std	Y+4, r25	; 0x04
    2878:	8b 83       	std	Y+3, r24	; 0x03
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	9c 81       	ldd	r25, Y+4	; 0x04
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <LCD_displayCharacter+0x392>
    2882:	9c 83       	std	Y+4, r25	; 0x04
    2884:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2886:	8d 81       	ldd	r24, Y+5	; 0x05
    2888:	9e 81       	ldd	r25, Y+6	; 0x06
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	69 f7       	brne	.-38     	; 0x2872 <LCD_displayCharacter+0x386>
    2898:	14 c0       	rjmp	.+40     	; 0x28c2 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289a:	6f 81       	ldd	r22, Y+7	; 0x07
    289c:	78 85       	ldd	r23, Y+8	; 0x08
    289e:	89 85       	ldd	r24, Y+9	; 0x09
    28a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <LCD_displayCharacter+0x3ce>
    28be:	9a 83       	std	Y+2, r25	; 0x02
    28c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    28c2:	e9 96       	adiw	r28, 0x39	; 57
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <LCD_displayString>:
 [DISCRIPTION]:	Display the required string on the screen
  [Args]: pointer to uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayString(const char *Str)
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	00 d0       	rcall	.+0      	; 0x28da <LCD_displayString+0x6>
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	0a c0       	rjmp	.+20     	; 0x28f8 <LCD_displayString+0x24>
	while((*Str) != '\0')

	{
		LCD_displayCharacter(*Str);
    28e4:	e9 81       	ldd	r30, Y+1	; 0x01
    28e6:	fa 81       	ldd	r31, Y+2	; 0x02
    28e8:	80 81       	ld	r24, Z
    28ea:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_displayCharacter>
		Str++;
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	9a 83       	std	Y+2, r25	; 0x02
    28f6:	89 83       	std	Y+1, r24	; 0x01
  [Args]: pointer to uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    28f8:	e9 81       	ldd	r30, Y+1	; 0x01
    28fa:	fa 81       	ldd	r31, Y+2	; 0x02
    28fc:	80 81       	ld	r24, Z
    28fe:	88 23       	and	r24, r24
    2900:	89 f7       	brne	.-30     	; 0x28e4 <LCD_displayString+0x10>

	{
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <LCD_moveCursor>:
 [DISCRIPTION]:	Move the cursor to a specified row and column index on the screen
  [Args]:  uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_moveCursor(uint8 row,uint8 col)
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <LCD_moveCursor+0x6>
    2912:	00 d0       	rcall	.+0      	; 0x2914 <LCD_moveCursor+0x8>
    2914:	0f 92       	push	r0
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	8a 83       	std	Y+2, r24	; 0x02
    291c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	3d 83       	std	Y+5, r19	; 0x05
    2926:	2c 83       	std	Y+4, r18	; 0x04
    2928:	8c 81       	ldd	r24, Y+4	; 0x04
    292a:	9d 81       	ldd	r25, Y+5	; 0x05
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	91 05       	cpc	r25, r1
    2930:	c1 f0       	breq	.+48     	; 0x2962 <LCD_moveCursor+0x56>
    2932:	2c 81       	ldd	r18, Y+4	; 0x04
    2934:	3d 81       	ldd	r19, Y+5	; 0x05
    2936:	22 30       	cpi	r18, 0x02	; 2
    2938:	31 05       	cpc	r19, r1
    293a:	2c f4       	brge	.+10     	; 0x2946 <LCD_moveCursor+0x3a>
    293c:	8c 81       	ldd	r24, Y+4	; 0x04
    293e:	9d 81       	ldd	r25, Y+5	; 0x05
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	61 f0       	breq	.+24     	; 0x295c <LCD_moveCursor+0x50>
    2944:	19 c0       	rjmp	.+50     	; 0x2978 <LCD_moveCursor+0x6c>
    2946:	2c 81       	ldd	r18, Y+4	; 0x04
    2948:	3d 81       	ldd	r19, Y+5	; 0x05
    294a:	22 30       	cpi	r18, 0x02	; 2
    294c:	31 05       	cpc	r19, r1
    294e:	69 f0       	breq	.+26     	; 0x296a <LCD_moveCursor+0x5e>
    2950:	8c 81       	ldd	r24, Y+4	; 0x04
    2952:	9d 81       	ldd	r25, Y+5	; 0x05
    2954:	83 30       	cpi	r24, 0x03	; 3
    2956:	91 05       	cpc	r25, r1
    2958:	61 f0       	breq	.+24     	; 0x2972 <LCD_moveCursor+0x66>
    295a:	0e c0       	rjmp	.+28     	; 0x2978 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	0b c0       	rjmp	.+22     	; 0x2978 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col+0x40;
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	80 5c       	subi	r24, 0xC0	; 192
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	07 c0       	rjmp	.+14     	; 0x2978 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col+0x10;
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	80 5f       	subi	r24, 0xF0	; 240
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	03 c0       	rjmp	.+6      	; 0x2978 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col+0x50;
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	80 5b       	subi	r24, 0xB0	; 176
    2976:	89 83       	std	Y+1, r24	; 0x01
		break;
	default: ;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	80 68       	ori	r24, 0x80	; 128
    297c:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_sendCommand>
}
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <LCD_displayStringRowColumn>:
 [DISCRIPTION]:	Display the required string in a specified row and column index on the screen
  [Args]:  uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	00 d0       	rcall	.+0      	; 0x2996 <LCD_displayStringRowColumn+0x6>
    2996:	00 d0       	rcall	.+0      	; 0x2998 <LCD_displayStringRowColumn+0x8>
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	6a 83       	std	Y+2, r22	; 0x02
    29a0:	5c 83       	std	Y+4, r21	; 0x04
    29a2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	6a 81       	ldd	r22, Y+2	; 0x02
    29a8:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_displayString>
}
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	cf 91       	pop	r28
    29be:	df 91       	pop	r29
    29c0:	08 95       	ret

000029c2 <LCD_intgerToString>:
 [DISCRIPTION]:	Display the required decimal value on the screen
  [Args]:  uint832
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_intgerToString(int data)
{
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	62 97       	sbiw	r28, 0x12	; 18
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	9a 8b       	std	Y+18, r25	; 0x12
    29d8:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    29da:	89 89       	ldd	r24, Y+17	; 0x11
    29dc:	9a 89       	ldd	r25, Y+18	; 0x12
    29de:	9e 01       	movw	r18, r28
    29e0:	2f 5f       	subi	r18, 0xFF	; 255
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	b9 01       	movw	r22, r18
    29e6:	4a e0       	ldi	r20, 0x0A	; 10
    29e8:	50 e0       	ldi	r21, 0x00	; 0
    29ea:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <itoa>
	LCD_displayString(buff); /* Display the string */
    29ee:	ce 01       	movw	r24, r28
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_displayString>
}
    29f6:	62 96       	adiw	r28, 0x12	; 18
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <LCD_clearScreen>:
 [DISCRIPTION]:	Send the clear screen command
  [Args]:  void
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_clearScreen(void)
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_sendCommand>
}
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <DcMotor_Init>:
 * 					 2. Stop the motor at the beginning
 * [Args]  : Enum to select Motor ID
 * [RUTURN]: Void
 */
void DcMotor_Init(EN_MororID_t MOTOR_ID)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	0f 92       	push	r0
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	89 83       	std	Y+1, r24	; 0x01
	switch(MOTOR_ID)
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	88 2f       	mov	r24, r24
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	a1 f4       	brne	.+40     	; 0x2a5a <DcMotor_Init+0x3e>
	{
	case MOTOR_ID_1:
		/* Setup the motor pins as output pins */
		GPIO_SetPinDir(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN1, pin_output);
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	41 e0       	ldi	r20, 0x01	; 1
    2a38:	0e 94 4f 0a 	call	0x149e	; 0x149e <GPIO_SetPinDir>
		GPIO_SetPinDir(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN2, pin_output);
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	61 e0       	ldi	r22, 0x01	; 1
    2a40:	41 e0       	ldi	r20, 0x01	; 1
    2a42:	0e 94 4f 0a 	call	0x149e	; 0x149e <GPIO_SetPinDir>

		/* Motor is stopped at the beginning */
		GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN1, logic_low);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
		GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN2, logic_low);
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	61 e0       	ldi	r22, 0x01	; 1
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
		break;
	}
}
    2a5a:	0f 90       	pop	r0
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <DcMotor_Rotate>:
 * 			 2- Enum to select State
 * 			 3- uint8 to select Speed
 * [RUTURN]: Void
 */
void DcMotor_Rotate(EN_MororID_t MOTOR_ID, EN_DcMotorState_t state, uint8 speed)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <DcMotor_Rotate+0x6>
    2a68:	0f 92       	push	r0
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	6a 83       	std	Y+2, r22	; 0x02
    2a72:	4b 83       	std	Y+3, r20	; 0x03
	switch(MOTOR_ID)
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	88 2f       	mov	r24, r24
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <DcMotor_Rotate+0x1e>
    2a7e:	43 c0       	rjmp	.+134    	; 0x2b06 <DcMotor_Rotate+0xa4>
	{
	case MOTOR_ID_1:
		if(state == DC_MOTOR_STOP)
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	88 23       	and	r24, r24
    2a84:	71 f4       	brne	.+28     	; 0x2aa2 <DcMotor_Rotate+0x40>
		{
			GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN1, logic_low);
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	40 e0       	ldi	r20, 0x00	; 0
    2a8c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
			GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN2, logic_low);
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>

			Timer0_PWM_DutyCycle(speed);
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	0e 94 0a 09 	call	0x1214	; 0x1214 <Timer0_PWM_DutyCycle>
    2aa0:	32 c0       	rjmp	.+100    	; 0x2b06 <DcMotor_Rotate+0xa4>
		}
		else if(state == DC_MOTOR_ON)
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	81 30       	cpi	r24, 0x01	; 1
    2aa6:	71 f4       	brne	.+28     	; 0x2ac4 <DcMotor_Rotate+0x62>
		{
			GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN1, logic_low);
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
			GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN2, logic_high);
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
			Timer0_PWM_DutyCycle(speed);
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	0e 94 0a 09 	call	0x1214	; 0x1214 <Timer0_PWM_DutyCycle>
    2ac2:	21 c0       	rjmp	.+66     	; 0x2b06 <DcMotor_Rotate+0xa4>
		}
		else if(state == DC_MOTOR_CLOCKWISE)
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	82 30       	cpi	r24, 0x02	; 2
    2ac8:	71 f4       	brne	.+28     	; 0x2ae6 <DcMotor_Rotate+0x84>
		{
			GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN1, logic_low);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
			GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN2, logic_high);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	41 e0       	ldi	r20, 0x01	; 1
    2ada:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
			Timer0_PWM_DutyCycle(speed);
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	0e 94 0a 09 	call	0x1214	; 0x1214 <Timer0_PWM_DutyCycle>
    2ae4:	10 c0       	rjmp	.+32     	; 0x2b06 <DcMotor_Rotate+0xa4>
		}
		else if(state == DC_MOTOR_ANTI_CLOCKWISE)
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	83 30       	cpi	r24, 0x03	; 3
    2aea:	69 f4       	brne	.+26     	; 0x2b06 <DcMotor_Rotate+0xa4>
		{
			GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN1, logic_high);
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	41 e0       	ldi	r20, 0x01	; 1
    2af2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
			GPIO_WritePin(DC_MOTOR_ID_1_PORT, DC_MOTOR_ID_1_PIN2, logic_low);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_WritePin>
			Timer0_PWM_DutyCycle(speed);
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	0e 94 0a 09 	call	0x1214	; 0x1214 <Timer0_PWM_DutyCycle>
		else
		{
			/* Invalid Input State - Do Nothing */
		}
	}
}
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <applicationInit>:
 [Description]:	This function is responsible to Initialize the Application
 [Args]:   void
 [Return]: Void
 ---------------------------------------------------------------------------------------*/
void applicationInit(void)
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Motor driver */
	DcMotor_Init(MOTOR_ID_1);
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <DcMotor_Init>

	/* Initialize LCD driver */
	LCD_init();
    2b20:	0e 94 5f 10 	call	0x20be	; 0x20be <LCD_init>

	/* Initialize Temperature driver */
	TEMP_Init();
    2b24:	0e 94 11 10 	call	0x2022	; 0x2022 <TEMP_Init>

	/* Display this string "Temp =   C" only once on LCD at the second row*/
	LCD_moveCursor(1, 2);
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	62 e0       	ldi	r22, 0x02	; 2
    2b2c:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_moveCursor>
	LCD_displayString("Temp =    C");
    2b30:	80 e6       	ldi	r24, 0x60	; 96
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_displayString>
}
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <applicationStart>:
 [Description]:	This function is responsible to Start the Application
 [Args]:   void
 [Return]: Void
 ---------------------------------------------------------------------------------------*/
void applicationStart(void)
{
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
	/* Get the temperature value */
	temp = TEMP_getValue();
    2b46:	0e 94 1a 10 	call	0x2034	; 0x2034 <TEMP_getValue>
    2b4a:	80 93 93 01 	sts	0x0193, r24

	/* Control the duty cycle of the output PWM signal (Fan Speed) based on the temperature value */
	if(temp >= 120)
    2b4e:	80 91 93 01 	lds	r24, 0x0193
    2b52:	88 37       	cpi	r24, 0x78	; 120
    2b54:	48 f0       	brcs	.+18     	; 0x2b68 <applicationStart+0x2a>
	{
		Fan = FAN_ON;
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	80 93 92 01 	sts	0x0192, r24
		DcMotor_Rotate(MOTOR_ID_1, DC_MOTOR_CLOCKWISE, 100); /* Rotates the motor with 100% from its speed */
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	62 e0       	ldi	r22, 0x02	; 2
    2b60:	44 e6       	ldi	r20, 0x64	; 100
    2b62:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
    2b66:	2e c0       	rjmp	.+92     	; 0x2bc4 <applicationStart+0x86>
	}
	else if(temp >= 90)
    2b68:	80 91 93 01 	lds	r24, 0x0193
    2b6c:	8a 35       	cpi	r24, 0x5A	; 90
    2b6e:	48 f0       	brcs	.+18     	; 0x2b82 <applicationStart+0x44>
	{
		Fan = FAN_ON;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	80 93 92 01 	sts	0x0192, r24
		DcMotor_Rotate(MOTOR_ID_1, DC_MOTOR_CLOCKWISE, 75); /* Rotates the motor with 75% from its speed */
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	62 e0       	ldi	r22, 0x02	; 2
    2b7a:	4b e4       	ldi	r20, 0x4B	; 75
    2b7c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
    2b80:	21 c0       	rjmp	.+66     	; 0x2bc4 <applicationStart+0x86>
	}
	else if(temp >= 60)
    2b82:	80 91 93 01 	lds	r24, 0x0193
    2b86:	8c 33       	cpi	r24, 0x3C	; 60
    2b88:	48 f0       	brcs	.+18     	; 0x2b9c <applicationStart+0x5e>
	{
		Fan = FAN_ON;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	80 93 92 01 	sts	0x0192, r24
		DcMotor_Rotate(MOTOR_ID_1, DC_MOTOR_CLOCKWISE, 50); /* Rotates the motor with 50% from its speed */
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	62 e0       	ldi	r22, 0x02	; 2
    2b94:	42 e3       	ldi	r20, 0x32	; 50
    2b96:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <applicationStart+0x86>
	}
	else if(temp >= 30)
    2b9c:	80 91 93 01 	lds	r24, 0x0193
    2ba0:	8e 31       	cpi	r24, 0x1E	; 30
    2ba2:	48 f0       	brcs	.+18     	; 0x2bb6 <applicationStart+0x78>
	{
		Fan = FAN_ON;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	80 93 92 01 	sts	0x0192, r24
		DcMotor_Rotate(MOTOR_ID_1, DC_MOTOR_CLOCKWISE, 25); /* Rotates the motor with 25% from its speed */
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	62 e0       	ldi	r22, 0x02	; 2
    2bae:	49 e1       	ldi	r20, 0x19	; 25
    2bb0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
    2bb4:	07 c0       	rjmp	.+14     	; 0x2bc4 <applicationStart+0x86>
	}
	else
	{
		Fan = FAN_OFF;/* Stop the motor */
    2bb6:	10 92 92 01 	sts	0x0192, r1
		DcMotor_Rotate(MOTOR_ID_1, DC_MOTOR_STOP, 0);
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <DcMotor_Rotate>
	}

	/* Display the temperature and FAN state */
	if(Fan == FAN_OFF)
    2bc4:	80 91 92 01 	lds	r24, 0x0192
    2bc8:	88 23       	and	r24, r24
    2bca:	49 f4       	brne	.+18     	; 0x2bde <applicationStart+0xa0>
	{
		LCD_moveCursor(0, 3);
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	63 e0       	ldi	r22, 0x03	; 3
    2bd0:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_moveCursor>
		LCD_displayString("FAN is OFF");
    2bd4:	8c e6       	ldi	r24, 0x6C	; 108
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_displayString>
    2bdc:	08 c0       	rjmp	.+16     	; 0x2bee <applicationStart+0xb0>
	}
	else
	{
		LCD_moveCursor(0, 3);
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	63 e0       	ldi	r22, 0x03	; 3
    2be2:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_moveCursor>
		LCD_displayString("FAN is ON ");
    2be6:	87 e7       	ldi	r24, 0x77	; 119
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_displayString>
	}

	/* Display the temperature value every time at same position */
	LCD_moveCursor(1, 9);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	69 e0       	ldi	r22, 0x09	; 9
    2bf2:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_moveCursor>
	if(temp >= 100)
    2bf6:	80 91 93 01 	lds	r24, 0x0193
    2bfa:	84 36       	cpi	r24, 0x64	; 100
    2bfc:	38 f0       	brcs	.+14     	; 0x2c0c <applicationStart+0xce>
	{
		LCD_intgerToString(temp);
    2bfe:	80 91 93 01 	lds	r24, 0x0193
    2c02:	88 2f       	mov	r24, r24
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <LCD_intgerToString>
    2c0a:	09 c0       	rjmp	.+18     	; 0x2c1e <applicationStart+0xe0>
	}
	else
	{
		LCD_intgerToString(temp);
    2c0c:	80 91 93 01 	lds	r24, 0x0193
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <LCD_intgerToString>
		/* In case the digital value is two or one digits print space in the next digit place */
		LCD_displayCharacter(' ');
    2c18:	80 e2       	ldi	r24, 0x20	; 32
    2c1a:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_displayCharacter>
	}

}
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <main>:
/*------------------------------------------------------------------------------
 *                               Main Function
 *------------------------------------------------------------------------------*/

int main(void)
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
	applicationInit();
    2c2c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <applicationInit>

	while(1)
	{
		applicationStart();
    2c30:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <applicationStart>
    2c34:	fd cf       	rjmp	.-6      	; 0x2c30 <main+0xc>

00002c36 <__mulsi3>:
    2c36:	62 9f       	mul	r22, r18
    2c38:	d0 01       	movw	r26, r0
    2c3a:	73 9f       	mul	r23, r19
    2c3c:	f0 01       	movw	r30, r0
    2c3e:	82 9f       	mul	r24, r18
    2c40:	e0 0d       	add	r30, r0
    2c42:	f1 1d       	adc	r31, r1
    2c44:	64 9f       	mul	r22, r20
    2c46:	e0 0d       	add	r30, r0
    2c48:	f1 1d       	adc	r31, r1
    2c4a:	92 9f       	mul	r25, r18
    2c4c:	f0 0d       	add	r31, r0
    2c4e:	83 9f       	mul	r24, r19
    2c50:	f0 0d       	add	r31, r0
    2c52:	74 9f       	mul	r23, r20
    2c54:	f0 0d       	add	r31, r0
    2c56:	65 9f       	mul	r22, r21
    2c58:	f0 0d       	add	r31, r0
    2c5a:	99 27       	eor	r25, r25
    2c5c:	72 9f       	mul	r23, r18
    2c5e:	b0 0d       	add	r27, r0
    2c60:	e1 1d       	adc	r30, r1
    2c62:	f9 1f       	adc	r31, r25
    2c64:	63 9f       	mul	r22, r19
    2c66:	b0 0d       	add	r27, r0
    2c68:	e1 1d       	adc	r30, r1
    2c6a:	f9 1f       	adc	r31, r25
    2c6c:	bd 01       	movw	r22, r26
    2c6e:	cf 01       	movw	r24, r30
    2c70:	11 24       	eor	r1, r1
    2c72:	08 95       	ret

00002c74 <__prologue_saves__>:
    2c74:	2f 92       	push	r2
    2c76:	3f 92       	push	r3
    2c78:	4f 92       	push	r4
    2c7a:	5f 92       	push	r5
    2c7c:	6f 92       	push	r6
    2c7e:	7f 92       	push	r7
    2c80:	8f 92       	push	r8
    2c82:	9f 92       	push	r9
    2c84:	af 92       	push	r10
    2c86:	bf 92       	push	r11
    2c88:	cf 92       	push	r12
    2c8a:	df 92       	push	r13
    2c8c:	ef 92       	push	r14
    2c8e:	ff 92       	push	r15
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	ca 1b       	sub	r28, r26
    2c9e:	db 0b       	sbc	r29, r27
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	09 94       	ijmp

00002cac <__epilogue_restores__>:
    2cac:	2a 88       	ldd	r2, Y+18	; 0x12
    2cae:	39 88       	ldd	r3, Y+17	; 0x11
    2cb0:	48 88       	ldd	r4, Y+16	; 0x10
    2cb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cba:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cbe:	b9 84       	ldd	r11, Y+9	; 0x09
    2cc0:	c8 84       	ldd	r12, Y+8	; 0x08
    2cc2:	df 80       	ldd	r13, Y+7	; 0x07
    2cc4:	ee 80       	ldd	r14, Y+6	; 0x06
    2cc6:	fd 80       	ldd	r15, Y+5	; 0x05
    2cc8:	0c 81       	ldd	r16, Y+4	; 0x04
    2cca:	1b 81       	ldd	r17, Y+3	; 0x03
    2ccc:	aa 81       	ldd	r26, Y+2	; 0x02
    2cce:	b9 81       	ldd	r27, Y+1	; 0x01
    2cd0:	ce 0f       	add	r28, r30
    2cd2:	d1 1d       	adc	r29, r1
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	ed 01       	movw	r28, r26
    2ce0:	08 95       	ret

00002ce2 <itoa>:
    2ce2:	fb 01       	movw	r30, r22
    2ce4:	9f 01       	movw	r18, r30
    2ce6:	e8 94       	clt
    2ce8:	42 30       	cpi	r20, 0x02	; 2
    2cea:	c4 f0       	brlt	.+48     	; 0x2d1c <itoa+0x3a>
    2cec:	45 32       	cpi	r20, 0x25	; 37
    2cee:	b4 f4       	brge	.+44     	; 0x2d1c <itoa+0x3a>
    2cf0:	4a 30       	cpi	r20, 0x0A	; 10
    2cf2:	29 f4       	brne	.+10     	; 0x2cfe <itoa+0x1c>
    2cf4:	97 fb       	bst	r25, 7
    2cf6:	1e f4       	brtc	.+6      	; 0x2cfe <itoa+0x1c>
    2cf8:	90 95       	com	r25
    2cfa:	81 95       	neg	r24
    2cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfe:	64 2f       	mov	r22, r20
    2d00:	77 27       	eor	r23, r23
    2d02:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    2d06:	80 5d       	subi	r24, 0xD0	; 208
    2d08:	8a 33       	cpi	r24, 0x3A	; 58
    2d0a:	0c f0       	brlt	.+2      	; 0x2d0e <itoa+0x2c>
    2d0c:	89 5d       	subi	r24, 0xD9	; 217
    2d0e:	81 93       	st	Z+, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	a1 f7       	brne	.-24     	; 0x2cfe <itoa+0x1c>
    2d16:	16 f4       	brtc	.+4      	; 0x2d1c <itoa+0x3a>
    2d18:	5d e2       	ldi	r21, 0x2D	; 45
    2d1a:	51 93       	st	Z+, r21
    2d1c:	10 82       	st	Z, r1
    2d1e:	c9 01       	movw	r24, r18
    2d20:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <strrev>

00002d24 <strrev>:
    2d24:	dc 01       	movw	r26, r24
    2d26:	fc 01       	movw	r30, r24
    2d28:	67 2f       	mov	r22, r23
    2d2a:	71 91       	ld	r23, Z+
    2d2c:	77 23       	and	r23, r23
    2d2e:	e1 f7       	brne	.-8      	; 0x2d28 <strrev+0x4>
    2d30:	32 97       	sbiw	r30, 0x02	; 2
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <strrev+0x18>
    2d34:	7c 91       	ld	r23, X
    2d36:	6d 93       	st	X+, r22
    2d38:	70 83       	st	Z, r23
    2d3a:	62 91       	ld	r22, -Z
    2d3c:	ae 17       	cp	r26, r30
    2d3e:	bf 07       	cpc	r27, r31
    2d40:	c8 f3       	brcs	.-14     	; 0x2d34 <strrev+0x10>
    2d42:	08 95       	ret

00002d44 <__udivmodhi4>:
    2d44:	aa 1b       	sub	r26, r26
    2d46:	bb 1b       	sub	r27, r27
    2d48:	51 e1       	ldi	r21, 0x11	; 17
    2d4a:	07 c0       	rjmp	.+14     	; 0x2d5a <__udivmodhi4_ep>

00002d4c <__udivmodhi4_loop>:
    2d4c:	aa 1f       	adc	r26, r26
    2d4e:	bb 1f       	adc	r27, r27
    2d50:	a6 17       	cp	r26, r22
    2d52:	b7 07       	cpc	r27, r23
    2d54:	10 f0       	brcs	.+4      	; 0x2d5a <__udivmodhi4_ep>
    2d56:	a6 1b       	sub	r26, r22
    2d58:	b7 0b       	sbc	r27, r23

00002d5a <__udivmodhi4_ep>:
    2d5a:	88 1f       	adc	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	5a 95       	dec	r21
    2d60:	a9 f7       	brne	.-22     	; 0x2d4c <__udivmodhi4_loop>
    2d62:	80 95       	com	r24
    2d64:	90 95       	com	r25
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	08 95       	ret

00002d6c <_exit>:
    2d6c:	f8 94       	cli

00002d6e <__stop_program>:
    2d6e:	ff cf       	rjmp	.-2      	; 0x2d6e <__stop_program>
